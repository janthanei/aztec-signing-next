{"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-aarch64","name":"DocumentSigning","functions":[{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"documentHash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"]},{"name":"add_sign","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"signer","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["add_sign"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"3715688037512703171":{"error_kind":"fmtstring","length":16,"item_types":[]}}},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"]},{"name":"add_signer","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"signer","type":{"kind":"string","length":130},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/+VdWXCcxRH+pd3VsZLYlW1Z8pFkIfcBWQmbOAfBBsxpG4MN5saytTLCsmSk9QkYzH3fN5gbg7nv+4Y8hFQqFfKQFypXVaqStzykqArJQ9Ryt/Rtq/fU/oIu/qrVv9vd0/PN/DM9PT3zj2qCvdfOkU8Nf4/xvQbuFwe5l/AW8j09uauzirrSYWGscYCx1gHGiAOMUQcYYw4w1jnAWO8AY4MDjI0OMMYdYGxygLHZAcYWBxj3cYAx4QBj0gHGVgcYpznAON0BxhkOMLY5wDjTAcZ2Bxg7HGCc5QDjbAcY5zjAONcBxq85wPh1Bxi/4QBjygHGfR1g3M8Bxm86wPgtBxi/7QDjdxxg/K4DjN9zgPH7DjD+wAHGHzrA+CMHGPd3gPEABxh/7ABj2gHGTgcYuxxgPNABxnkOMM53gPEgBxh/4gDjAgcYf+oA488cYPy5A4y/cIDxYAcYf+kA4yEOMC50gHGRA4yHOsB4mAOMhzvAuNgBxiMcYDzSAcajHGA82gHGYxxgPNYBxiUOMC51gHGZA4zHOcC43AHG4x1gPMEBxhUOMK50gPFEBxhPcoBxlQOMJzvAeIoDjKc6wHiaA4ynO8B4hgOMZzrAeJYDjKsdYOx2gHGNA4xrHWDscYAx4wBjrwOM6xxgPNsBxj4HGM9xgHG9A4z9DjBucIBxwAHGQQcYNzrAeK4DjEMOMA47wJh1gHGTA4ybHWDc4gDjVgcYtznAuN0BxvMcYDzfAcYLHGDc4QDjhQ4wXuQA484QMI6CjPL3i4Mgh1478okwnw77o8P06LA6OgyODlujw8zosDA6jIsOu6LDpOiwpuTIhw4bosN86LAcOoyGDnuhw1TosBI6DIQO26DDLOiwCDqMgQ47oMME6GX91Mhn35HPfiMfelmaXkaml33pZVp6WZVeBqWXLellRnpZkF7Go5fd6GUyelmLSkcvG9HLPPSyDL2MQi970MsU9LICvQxAm+1pMzttFqfN2LTZmTYTy2bdRSOfQ0c+tFmSNiPSZj/aTEeb1WgzGG22os1MtFmINuPQZhfaTEKbNZaPfGizAS3m02I5LUbTYi8tptJiJS0G0mIbLWbRYhEtxtBiBy0mULB+9ciHgs0UzKVgKQUjKdhHwTQKVlEwiIItFMygYAFNxmmyS5NJmqzRZIgmG+TMk7NMzig5e+RMkbNCzgANtjSY0WBBxpiMHRkT6qwXBXsPZNXXD/leA7Td8D3B92WD2VTfQF+2r7u/b3umB8WfKk/8SPjxC76vyA4Oda/LpIb7R9KlUwMjf7v7+we3ZHoOSCFvOLVh03A2NZztHsqmeocGN6Q6D0Ddq+HHHMmvb3NmIDXct24gMzSidSjT3bMtldnaN5wdxqT3hAjrGfgxi++Lhoa6t43UUU9ma2pwUzY12JtaM7hpoCcH1CvwYy7fu7PZzIaN2VR2MNXd05Pa0pc9OzW4OTPUOwIM035QaaYfV5rwk0oT/nkSxfxHpZl+XmnChtrK0S6YRNrDaysEvKTShCsrTdg9iWKurzTTzZPI9JJKM72m0oS3VJrwgUkUc0+lmb5ZacJfTwLtfyaRNhapEHBLpQnbKk24X6TyYi6qNNMlk8h0BaTdd2La4U1rskPda7P5FayarILTKy32+kkUe0ulme6oNOE1k0B7U5lpxzzAPZyQZgPSAWVGsZB/pyd3jR7rHIShe8Ha+Y3B+OynurgXdJHuWDh1kqZZ2GENe3UJfskrAjy542zucKYdbvAWM22xwTuCaUcYvCOZdqTBO4ppRxm8o5l2tME7hmnHGLxjmXaswVvCtCUGbynTlhq8ZUxbZvCOY9pxBm8505YbvOOZdrzBO4FpJxi8FUxbYfBWMm2lwTuRaScavJOYdpLBW8W0VQbvZKadbPBOYdopBu9Upp1q8E5j2mkG73SmnW7wzmDaGQbvTKadafDOYtpZBm8101YbvG6mdRu8NUxbY/DWMm2twethWo/ByzAtY/B6mdZr8NYxbZ3BO5tpZxu8Pqb1GbxzmHaOwVvPtPUGr59p/QZvA9M2GLwBpg0YvEGmDRq8jUzbaPDOZdq5Bm+IaUMGb5hpwwYvy7SswdvEtE0GbzPTNhu8LUzbYvC2Mm2rwdvGtG0GbzvTthu885h2nsE7n2nnG7wLmHaBwdvBtB0G70KmXWjwLmLaRQZvJ9N2GryLmXaxwbuEaZcYvEuZdqnBu4xplxm8y5l2ucG7gmlXGLwrmXalwbuKaVcZvKuZdrXBu4Zp1xi8a5l2rcG7jmnXGbzrmXa9wbuBaTcYvBuZdqPBu4lpNxm8m5l2s8G7hWm3GLxbmXarwbuNabcZvNuZdrvBu4Npdxi8O5l2p8G7i2l3Gby7mXa3wbuHafcYvHuZdq/B28W0XQbvPqbdZ/DuZ9r9Bu8Bpj1g8B5k2oMG7yGmPWTwHmbawwbvEaY9YvAeZdqjBm8303YbvMeY9pjBe5xpjxu8PUzbY/CeYNoTBu9Jpj1p8J5i2lMG72mmPW3wnmHaMwbvWaY9a/CeY9pzBu95pj1v8F5g2gsG70WmvWjwXmLaSwbvZaa9bPBeYdorBu9Vpr1q8F5j2msG73WmvW7w3mDaGwbvTaa9afDeYtpbBu9tpr1t8N5h2jsG712mvWvw3mPaewbvfaa9b/A+YNoHBu9Dpn1o8D5i2keK18h8oVVvnj3vwDDn2bTyKHNfuSi/unDyO7BG5RWF75JnPAht7j/6bwDrVP6SVy3fqU4i/HwjQIs25OIcrbuG3HLQz9tQD3+PAf8B/k6ru79qCHIuqvv6hlDKniZ9DQ3jeKKQl5SjFmQaAEcMft8fjNMbAX8U6k300jJlHX9vbMifLqrSJUGmDtLVq3T1gHtUduRzO3+X1fUk/+7evOG4jWsHezKLenqGMsM5AUD9bzPzXaXqqytDX4fWt2xTf39fb19maPGExdN6Q6/YoNpgYnkQC/Lx0rE2klvIv9OTu3L6W5R11yuMMZB5jO/TDJyl1r1VR8Ek9IX1LBsMvdazrDew5HuWVn1LPlZ9P813q77zjQ2Iu4r26aBCY4PkGfbY0KDyt8aGOoVp1GZDuoXVwZNOQl7YpvX4pduE53Q0Xuj2aj2XBkMXjrF0tah0oitQugJDl8Zg9YVSdIXnS+1tH4KpDvJrDCW/vb5iXJWZ8moKJb+udKH6lTzjgCkMe9Ck8o8bz7cZ8q/i2Jkm3S2hlK2ztwZ0S9laVN3KrkSkUTrZeiY+5D4gL3UjMglIF4Pff+R7EtJjPQotUHmgn/d7/h5eG0zPD+8Z7F2bxXJWU28iFMydvY3BuM9UNcyd6XRLMN6/6+D+JyhHK3+XdifyTUAXmW9HxnX8lWkJkEUfBm1aFGRqQaZRycQVVhy3RLYlyLUfwgvJXs0rZC/jcA+pr3SWUpctUD8imwQa+g+6zhuVrmqmSwAerB9dnrihC8eir4ouyxco1bfSGNBnoWsh39PlXV2akG/+Ek4sLT2/UPmjUH9hzl90nmZsS2FKAg37UUTpiihdX2Q6aS+JYOIeHqseooauGPDpalHpRFegdAWGLo0B67lcXZIO44yJCnThWF3Dn4X8Oz3JKwmYkpBfK+RXxbY9uh8MYxRV0jsaW58eDuZR3TPC0T2P2oT4y+gvpWrG82tjuvhLIi/PiHTMDHIvwtweUn0UarOSZxwwhWEf21X+khfaxw6FKQm0aYCtQ+nqULowHcYT5Lk8zIL03H7ElUN9Sp4T+vDtkE8NyCRBr8jIxDlfTE/yx3bTBe2mGXRGQX460EVmO5RhvlEGtK1W7CCUNbMiY7HkGXbsQI9nUidon0Pqa/Os9qn9OnnLUHAKlg5IQ5fYMBzn4lAG9KeqOMZ04hiDeUg95iuXVXZtKxOgG2VFF8Yq6o28pR/iHEbSicxRRfqh1R8wBlLN8bNQf2iGsofZH4o9N7S9aN+EhnM1xCx4tX7d33Du0Qx5YjrRFShdgaFLY8hnW1eBbY2DzqghHwOZHrCtp4JtTagyWHO4hMJr2SMrhiE6URbjfcLHNTzhdxdo76gb556lPDORb/4K6apGu2wCXBgjE106tt1k6IopXVZMq1RcGgPGgsrVJely9mJUqCsG30WX1Y93QD/WMXCRxxilyPytZlzHTujHKKv1yvjSqrCh3suKjC/TjDJcAWXQ8VSRRz9PZF6HMlwNZZA02D5ag9wrvHh0YT9P8owHoc1LO/GZBaoe860RVdvP07a/VeUvfp4eN3Asogv9vCZIKzQdL6kJJsZZdN6WndFx/kQw0c5g3jHgoy9WDzrz9RWRubdIX7HaLMZOpsoXkzzDbrNJlb9+bi1Qd0m4Cw3X/MReoJ15FOzMNMgnasjHQGYP2JnH+Tu1iUgw0T4FCp/oCkA2RNvTac2VBZvlMz1boA1afoLVl7StaVZ1gjYZ+7uMT2P7kvhUjVVDfdlMoK5a+I6VO83g60JMUwAFGC6iis46JSNpYyDzapGOq9Ni48NBFjdF6MFb0lqD99vQID819KKTlVC0EDdLzUOHXpcDg00i82GRxqcnB9YEQm/CkTTY4OIKgzVhCbFeDrQCn1a9iMxvitRLW1B+vbQZ9RJRGIIgtzNLveECR5gLxfnqCAMgIvOHIn1QNv1iX4uGs4l5Pqm9NQJ5C17ITz8zvZBkOU36mWGwABc6pG/jIs2nhlMteqdBPYlMAtIWsz9/KdHJbwWdV1Q4Ufk72Lr5XFkhtsMuy4YJPmyHIvPPMm2YDu5bz13SSL5or/D56438OpiD+aMDKjL/KhIc0QubWj9inW7ob4Zg0b9hnNIBLysvorUrGt1nAZZq2+jZUIYo5D8L6CLz3xLtT05QOhz7M0/bHwlOov2ZDfishaEaKKfISBpcdBIZ3Eyng9aWU6jHKAyiJgqkw5ddREbw1CkZtCtjbYcztJ4TBqY6gNao9KHtwSA5Ti72qR3Hp+2HyGMfEZmfQx9prR3Pt1AfwcAGLh4GjB2fw1QFNiTPeBDaAlKntYiix9EQbcQ8qx+1q/wlsCE4BctsSEOXBDbwueKYphchrY0n2j8rpiuoUFd7mbrala4v2h5a/tjsIuUoZA/roKyWPdR1aY3x1oY2/exQV3uZutqVLrR16BM0Kf1o/8Tmov2zbHSbkkeMdUoGbbTI/LSAjW4x0mLgO5+f0g75YB2hbRaZQ8AGn1k7US/Op9sVbarsjS6H5ZMsLlCPpdiuQm0e26S2bVgvzeHXy6ivNqeEehGZpUXqZU5Qfr3MMepltsIQBLnjs9SbyDXC9zDaTr46wjYlMicW6YP65eOpnE9b/qx+ZpY/q9u7fmbJwPZxpW+LTrQL1hiIi+0io33UQvZnTZG612nR37R8xUgwcQ4pF7bHhNJL6cUv0UHZEzLdOQc549iGV42Rl5YJ0UftxL6q5+8dQBeZ/hLb/RT4LV263Y+NYZCftkOWrdI+sqSResC5VyEfxRrXsQ0Wi41sKXHu1Q75aH24WcXaDGKN9aIDF0JEZgeM9btqJ+oV/xzHNKFN9Vgv5bDG+ktDHOvR3yo01sfDrxdzrLfqRWSuDXGsx3r5so/1bSp/rKNbS7R56Mt5HevR5lljvfRtHOt3wVivF0Atm6jH+kL258ES5zq4ORQ3QhfbQI9rJLvB1n0GsfOQ4jNdOPZofGijReaJIn1Vj2NW7FxvntebNRNQH+1AmwnfdX4SOxeZpIH9+QLYUX8kj34sz3RD/2/h2b1cO1Evzjt0vAXtNvrrIdkf00Zr+4f2560S7c9MwD5VsaKxMaWA/RGZUuwPxpWt8VXKiOPnTKVLt3uMO80skA79KpHBTYQoI2nRfnxcxH/Tc26MYc2EfD6D2DnS5f47sLfal7P6iMj8D/rIJyX2EbH3ONbIFaIfUzB2PgvwTsW8SPLXvs9U+SiSvx7HJXauY+ZzIA1dGDvX7RfbUE2eciZBvr1EXUGFujrK1KVf9Pqi7aE1By3Fh85nDzF2btlDPVajzRJdbSo/jHdbujrK1NWhdKGtK+Q7ov3D2Plntfnzb1byaMfrlAz6fiLzeZGxVKfFFzIt38Hy4XT7Rj8lgEMtvhGZqBfn0/olrqmeE0k5LJ+kjrGXOm8sZw6Cvqa2bVgv8fDrZdRXm1tCvYjMPkXqZW5Qfr3MNepljsIQBLnjs9SbyIUdi8lXRxhzGCtHgTpC+437WaZqPj3WByA//cxEplAMRD8z9EHR/knfRnsvdsEaA2dCPYkMzsWL2Z9vFql7nRb9TdyYjOvler+w3mOM4wHupdMYCvl8qEtjwM3/6CfvD/WI/nAU5HF9VWQGwEanwUYLH/fFzgihXPWgq61CXZION/lbdfQzqCOc0+SrI5FZDnV0MNSRpMHN+yEdoDDfiu9onxfnZ4eWaHemA/aQ7M5B2u6M7ZsvsAdW96saKKfItMF3upIggy+j6D2uOM8TGXzJA2UwdiYySwvULR7GiP1E69OHhelDJBJGOXQs0WqzIrOyyNis50Gl2FrhYd8RmZML5Ifzbuwr4YzRew8LLGe/5hlF6kr7KNLGytkfaa2XRIKJc0Eti/1iNuRrpcPv2m9Dm9tRRj44fstdrx9YdYSHtoiMbk+tSg+2p/4i9kunRfuO4xfuf0Y7GQ1ybZ/QRWYIbP71hl58V2KGyov0hXMozIIuKw4m+WO/FJmtJdqBgHVZe93yxQ4x1tKmMIS3lrC3f+cbv7FuRObCL81Y2JXWY+FY24H8dH1b9iafr4wvleq4B9oAfHa6/Vrj8QyoL5HRY+YMlR+OmdcWGTNjKi32O8xL8Fj2ZYbCIzJoC0Tm5hLtC5Zxf7ADcsh/xDjsX/yHOnXYfwxk7gT7cje0h5jSO/piqcEPoNx4oY8sbXj0wMJwfLvRs5vi6p80SF5RKL/IxNU/aZDfu+FZN+X5Jw2N8E8a5J87NDXkTxdT6ZIg01Dgnzs0Gv+kYRfjiwe5fbWacXh81rTP7P+0ba5AMNUAAA==","debug_symbols":"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","brillig_names":["add_signer"]},{"name":"add_signer_final","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"signer","type":{"kind":"string","length":130},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["add_signer_final"]},{"name":"get_sign","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"signer","type":{"kind":"string","length":130},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_sign"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"3715688037512703171":{"error_kind":"fmtstring","length":16,"item_types":[]}}},"bytecode":"H4sIAAAAAAAA/9VYTXPaMBCVg41lUwe3gEnSQ3ttT3IwNNyY6ef/8KTX/IT89bBGOzw2xBkUaSZoxiNb0r59eitpbUdqV/T2iux9Yuuhel54zMbW5m2l9ohlQvKMzoTnxZnwHJwJz9gjz+gIT6pje0/7jvZcqnb78VknGlOgB9Cv+oCk10dbZxYInW08KZcJv96w75o2s9wD8F4Sbh4G21BAfuq99gp8UTD/2j6uI3sVtl+BfaH2Af8FbbxQfkMbn+R/oC1Vh76Ijw4Tr7uA8TIFaKjABxbcJLzecxUszl22GAn/ufDfxdQKrqEttg8jaEvEmqHHL9CvYU7c/13MDbkMBBfCTUJoYWM/DIFtTIMaxkc0TI5oODyi4WR7/RM4xDvVQXh3mUADxxh8Mc8LGKOBRwLP39S+PYOTPgZdGHdMc+d1pF+2i4VdCWOGYJcKuxR4d2O311d7P7J64hng701ltZZntj/sH4tM7feiZ973hP0hCHbTYReA7XP9EvZlGE1WhD0Og93l9jII9m2nyUfA9vjFUFMcP6nDQv4mQeJb1335k33mwClE/pwI/+wL8+dUcCqhDffVVGBNBRZpOYPxHtfcf+Q0O4ET2pWOdiNHu1N4knYVjPd49jbIqXKcy9jRLne0OyVWpN0cxntcdwfazR3n4qrdpaNd5mjnus5d5zcHvngG+/xLhJxii82+OM8kMObB1nQuXqnDQjyvgafHXHHblyuugRPfM7dccErewGmxWJt2tV6umrq9b9tFBNjMiZ/xf8eNGCNzDOn2OYxuBr9dbkAnfv9G7fibgLngt0sG9r459unIPkvBlXm8pj9pfQX3PJcC7DZe5rH7R4DvE+xrFkQ3s+zbE+wzV6He33bvTzPhfyL0J00qwamENoxlJbAqgfUe7PAfGc+V8sIT7yz2rOIYAAA=","debug_symbols":"tdnLaoNAFIDhd5m1C29zLr5KKUETDYJoUFMo4rvXtKEEsv434tEz/+5bzRYubXO/nvqxm5ZQfWxhmM712k/jMW17Epq5H4b+enr9HNLHo8x/95dbPT7GZa3nNVRFmYR2vBwvfpzu+qENlaZ78rao+XNR9X8x+v6ZhLKgwiUVjlRYqLBSYaPCDoVjSoUzKkzJi5S8SMmLlLxIyYuUvEjJi5Q8oeQJJU8oeULJE0qeUPKEkieUPKHkCSVPKXlKyVNKnlLylJKnlDyl5CklTyl5SskzSp5R8oySZ5Q8o+QZJc8oeUbJM0qeUfKckueUPKfkOSXPKXlOyXNKnlPynJLnlLwsTbFyhpVzrFxg5RIrR6wsWFmxsmFlzGDGGNyP6aue+7oZ2ueVQXcfzy83COv37e/PsfwD","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"sign_doc","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"signer","type":{"kind":"string","length":130},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_keys_and_partial_address","get_key_validation_request","decompose_hint","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_invert"]},{"name":"end_sign","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/81XS2/TQBDetHZjJw2JeEiAOBiJGxySUiHgQiuEQBxaUQ5cQMLUTlgpsSvH6YNfTzbMxF9Gm7QhNmKkaMbebx47Mzvr1FRBNeKuWkIG4KjVtCOMGWqB3CZ+lOaBTnSuw6H+FUcIfwryQ+LHyfAqCKORToLTMAniJArGepDoZICab0B+QPwwy8KrqasovgzSSR6k/eBHOkmiMSq+B/kR8TDP49FZHuTp1HEUXOj8Z5Cex1l/mF6g7qe/dfp1TafznE6I+9PfFslcmwN67m5GPR+CK9X2y/3nxvZ2NXF3fVX0aNm261Mbb70/tjh+9mVe10m+Azim3emvw0U+Hx2fnaZRfBhFWTxeaAqMfRXd1J67hr370t7RZDjUfR1n7y71OF+wazvnRt5SRU/ifjAWXEeStTO4A3rubka9Gvh3yPaOiNEFzC3it6+JU5UXY7cFMaEvrGGJ/bwne8JWq4ZarHWZMwZrwv7ZF/eIyUldxNSBdxxzG9YxXmlf9mAH8C74lJfgqlyhLRlDRb0ym88V1WU2Q+vV2O6Z3G6LHBn+GPx5kGPHgncB8xHWnpDchnU8O3inOYDBO7QhML7wjX3G2F1VfNfMZ+fn6TdKnGHbeODmOvIhfFfou7D+jPiyMYW30AHx7ma0bzsePsT0L8cU+2yoysZkz9Y6coy0VNEOjO3AOwdwtvZ/AbH7oLOs/RnzGtZekdwkHcawPhO2uCdi9kmfYyk7j7uwB9xbE94zhv3aehttKWWvSQ3sMoZ12G8b9s5Yg7lHcnGc8zQLB/GXTOexEoTfM5hc37IuNyHnDQeG8xdnEGJYFxviA3Fb0loWXWw+29y8aSNxgzPWJPEuyTKJJ3G48IcPBwdSzeJLYv6nhj0hvjT3lFw8dI5XSex7xux38D3vFfAnDxBj1jlAHcBgHT2ht05f2y66b8RtucXvLt5Dy2IPvzNMr+/wfznISd0rYnYAswUxMSYCu33w6wq7Zj23rDOtuuC4P2YXbDW90p3NIa/YnwO+HNg/YxoQhwvPGeyn6S3uh3PBdmezhuSmt1zPFXodwHig5ws9X9TN1ECT3FCL56DMmYG1NufiNznUkFZhEwAA","debug_symbols":"1ZrdbuIwEIXfJddceMZ/M7zKalVBC1UkBBXQlVaId9+kJU4qp7Z2u1QzN4jAiedzmHDsmVyap8369fmh3W8Pp2b549LsDo+rc3vYd0eX66JZH9vdrn1+mH7cmP4lvslPL6t9f3Q6r47nZgkR3aLZ7J/6t9Z1A2zb3aZZRnNdZGK28aZlH5MUAs5oHQLfxA6RRrWBGXUgsDd1IOQP6p+Lhr6M3g2UxGYi/gZ4/vp1j8P4zLXrDugGMSBzBZ3ADxgE07Hf0cH8R/buun+E7wPAvQPgvQPYewdwcwGsd8O9aH3wteSPNEToQowRyM+oPYch+T2zqWSQjxYGdbSYZZBXTR9U00fV9KSanjXTo1FND6rpUTW9VU2v2mtRtdeiaq9F1V5rpd+1nhK9zzZYVnrmRJfoyWT03585ac8XjPEVejAcxrFHtQX/Rk+q6VkzvftklRYh0ROX6Z0lHAodtprJgUOi55jdh66+7mKc8vTn4D+cY//+HD/v7CFNyIbJ9Od/aQyYKitElV86WBhwgrW1OkzoBh/UgFkdxpNw+pRyAQgyehZO70OBPhjh9JSKj8CZswdQTY+q6a1qeun/mGV6r5o+qKaPwukdjvS2ouZxWcGeKJurdGf+fK49vXRnLtJH6c5cppfuzGV6p7liEIVXyghStYYwW5FG6fWOtGudpZdeKUve1tFjzR26DfTgDi7mc5XewypWpqL0HlaRnqT3sMr00ntYZXrpPawyvfRqeJleujOX6aX3sMr0qjsRJN2Zy/SqvZZUey2r9lpW7bWs2mtZsddeu8Nfq2O7Wu82t6evt6/7x8nD2OffL+/fdOI/","brillig_names":["end_sign"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"DocumentSigning::sign_doc_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"DocumentSigning::sign_doc_parameters","fields":[{"name":"signer","type":{"kind":"string","length":130}}]}}]},{"kind":"struct","path":"DocumentSigning::add_sign_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"DocumentSigning::add_sign_parameters","fields":[{"name":"signer","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"DocumentSigning::end_sign_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"DocumentSigning::end_sign_parameters","fields":[]}}]},{"kind":"struct","path":"DocumentSigning::add_signer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"DocumentSigning::add_signer_parameters","fields":[{"name":"signer","type":{"kind":"string","length":130}}]}}]},{"kind":"struct","path":"DocumentSigning::add_signer_final_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"DocumentSigning::add_signer_final_parameters","fields":[{"name":"signer","type":{"kind":"string","length":130}}]}}]},{"kind":"struct","path":"DocumentSigning::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"DocumentSigning::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"documentHash","type":{"kind":"field"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"DocumentSigning"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"documentHash","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"signers","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"signingEnded","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"active_at_block","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}}]}}]}]}},"file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n","path":"std/array/mod.nr"},"24":{"source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"25":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n","path":"std/hash/mod.nr"},"34":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"58":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"59":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"66":{"source":"use crate::collections::vec::Vec;\nuse crate::convert::From;\n\nimpl<let N: u32> str<N> {\n    /// Converts the given string into a byte array\n    #[builtin(str_as_bytes)]\n    pub fn as_bytes(self) -> [u8; N] {}\n\n    /// return a byte vector of the str content\n    pub fn as_bytes_vec(self: Self) -> Vec<u8> {\n        Vec::from_slice(self.as_bytes().as_slice())\n    }\n}\n\nimpl<let N: u32> From<[u8; N]> for str<N> {\n    fn from(bytes: [u8; N]) -> Self {\n        bytes.as_str_unchecked()\n    }\n}\n","path":"std/string.nr"},"70":{"source":"use dep::aztec::macros::aztec;\n\n#[aztec]\ncontract DocumentSigning {\n     use dep::compressed_string::CompressedString;\n     use dep::aztec::prelude::{\n        AztecAddress, Map, PublicMutable, SharedImmutable\n    };\n    use dep::aztec::{\n        keys::getters::get_public_keys,\n        macros::{storage::storage, functions::{public, initializer, private, internal}}\n    };\n    use dep::aztec::oracle::debug_log::{ debug_log };\n\n    #[storage]\n    struct Storage<Context> {\n        admin: PublicMutable<AztecAddress, Context>,\n        documentHash: SharedImmutable<Field, Context>, //currently MD5 hash\n        //list with signers (in bytestream) and their respective hasSigned t/f\n        //problem: bool is not nullable, so we have to use Field with 0(doesnt exist),1(not signed),2(signed)\n        signers: Map<Field, PublicMutable<Field, Context>, Context>,\n        signingEnded: PublicMutable<bool, Context>,\n        active_at_block: SharedImmutable<u32, Context>, // when people can start signing\n    }\n\n    #[public] // annotation to mark function as private and expose private context\n    #[initializer] // annotation to mark function as a constructor\n    fn constructor(admin: AztecAddress, documentHash: Field) { // called when contract is deployed\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.documentHash.initialize(documentHash);\n        storage.signingEnded.write(false);\n        storage.active_at_block.initialize(context.block_number() as u32);\n    }\n\n    #[private] // annotation to mark function as private and expose private context\n    fn sign_doc(signer: str<130>) {\n        //v056 changes\n        let msg_sender_npk_m_hash = get_public_keys(context.msg_sender()).npk_m.hash();\n        let secret = context.request_nsk_app(msg_sender_npk_m_hash); // get secret key of caller of function\n        let nullifier = std::hash::pedersen_hash([context.msg_sender().to_field(), secret]); // derive nullifier from sender and secret\n\n        let signer_s: CompressedString<5,130> = CompressedString::from_string(signer);\n        context.push_nullifier(nullifier);\n        DocumentSigning::at(context.this_address()).add_sign(signer_s.serialize()[0]).enqueue(&mut context);\n    }\n    \n    #[public]\n    #[internal]\n    fn add_sign(signer: Field) {\n        assert(storage.signingEnded.read() == false, \"Signing has ended\");\n        \n        let current_status = storage.signers.at(signer).read();\n        assert(current_status != 0, \"Given signer doesn't exist in signer list\");\n        \n        if current_status == 1 {\n            storage.signers.at(signer).write(2);\n        } else if current_status == 2 {\n            assert(false, \"Signer has already signed the document\");\n        }\n    }\n\n    #[public]\n    fn add_signer_final(signer: str<130>) {\n        let signer_s: CompressedString<5,130> = CompressedString::from_string(signer);\n        let signer_serialized = signer_s.serialize()[0];\n        assert(storage.signers.at(signer_serialized).read() == 0, \"Given signer already exists\");\n        storage.signers.at(signer_serialized).write(1);\n    }\n\n    #[public]\n    fn add_signer(signer: str<130>) {\n        // Call add_signer_final directly without using enqueue\n        add_signer_final(signer);\n    }\n\n    unconstrained fn get_sign(signer: str<130>) -> pub Field {\n        let signer_s: CompressedString<5,130> = CompressedString::from_string(signer);\n        storage.signers.at(signer_s.serialize()[0]).read()\n    }\n\n    #[public] \n    fn end_sign() {\n        assert(storage.admin.read().eq(context.msg_sender()), \"Only admin can end signing\"); // assert that caller is admin\n        storage.signingEnded.write(true);\n    }\n}\n","path":"/Users/jan.thanei/Desktop/frontend/contracts/signing/src/main.nr"},"99":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"100":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"101":{"source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"102":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"122":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"123":{"source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"128":{"source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"129":{"source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"130":{"source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"131":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(address: Field, storage_slot: Field, block_number: Field, length: Field) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field\n    )\n}\n\nunconstrained pub fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"136":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"162":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"163":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"168":{"source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"169":{"source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr"},"176":{"source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr"},"177":{"source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"185":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"230":{"source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"239":{"source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"285":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"305":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"308":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"310":{"source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"311":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"314":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"315":{"source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"323":{"source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"324":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"338":{"source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\npub struct CompressedString<let N: u32, let M: u32> {\n  value: [Field; N]\n}\n\nimpl<let N: u32, let M: u32> CompressedString<N, M> {\n    pub fn from_string(input_string: str<M>) -> Self {\n        let mut fields = [0; N];\n        let byts = input_string.as_bytes();\n\n        let mut r_index = 0 as u32;\n\n        for i in 0..N {\n            let mut temp = [0 as u8; 31];\n            for j in 0..31 {\n                if r_index < M {\n                    temp[j] = byts[r_index];\n                    r_index += 1;\n                }\n            }\n\n            fields[i] = field_from_bytes(temp, true);\n        }\n\n        Self { value: fields }\n    }\n\n    pub fn to_bytes(self) -> [u8; M] {\n        let mut result = [0; M];\n        let mut w_index = 0 as u32;\n        for i in 0..N {\n            let bytes: [u8; 31] = self.value[i].to_be_bytes();\n            for j in 0..31 {\n                if w_index < M {\n                    result[w_index] = bytes[j];\n                    w_index += 1;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let M: u32> Eq for CompressedString<N, M> {\n    fn eq(self, other: CompressedString<N, M>) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Serialize<N> for CompressedString<N, M> {\n    fn serialize(self) -> [Field; N] {\n        self.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Deserialize<N> for CompressedString<N, M> {\n    fn deserialize(input: [Field; N]) -> Self {\n        Self { value: input }\n    }\n}\n\n#[test]\nunconstrained fn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1,11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_serde() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n\n    assert_eq(name, CompressedString::deserialize(name.serialize()));\n}\n\n#[test(should_fail)]\nunconstrained fn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/compressed-string/src/compressed_string.nr"}}}