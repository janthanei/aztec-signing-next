{"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-aarch64","name":"DocumentSigning","functions":[{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"3715688037512703171":{"error_kind":"fmtstring","length":16,"item_types":[]}}},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"documentHash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"]},{"name":"add_sign","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"signer","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["add_sign"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"3715688037512703171":{"error_kind":"fmtstring","length":16,"item_types":[]}}},"bytecode":"H4sIAAAAAAAA/9VYTXPaMBCVg41lUwe3gEnSQ3ttT3IwNNyY6ef/8KTX/IT89bBGOzw2xBkUaSZoxiNb0r59eitpbUdqV/T2iux9Yuuhel54zMbW5m2l9ohlQvKMzoTnxZnwHJwJz9gjz+gIT6pje0/7jvZcqnb78VknGlOgB9Cv+oCk10dbZxYInW08KZcJv96w75o2s9wD8F4Sbh4G21BAfuq99gp8UTD/2j6uI3sVtl+BfaH2Af8FbbxQfkMbn+R/oC1Vh76Ijw4Tr7uA8TIFaKjABxbcJLzecxUszl22GAn/ufDfxdQKrqEttg8jaEvEmqHHL9CvYU7c/13MDbkMBBfCTUJoYWM/DIFtTIMaxkc0TI5oODyi4WR7/RM4xDvVQXh3mUADxxh8Mc8LGKOBRwLP39S+PYOTPgZdGHdMc+d1pF+2i4VdCWOGYJcKuxR4d2O311d7P7J64hng701ltZZntj/sH4tM7feiZ973hP0hCHbTYReA7XP9EvZlGE1WhD0Og93l9jII9m2nyUfA9vjFUFMcP6nDQv4mQeJb1335k33mwClE/pwI/+wL8+dUcCqhDffVVGBNBRZpOYPxHtfcf+Q0O4ET2pWOdiNHu1N4knYVjPd49jbIqXKcy9jRLne0OyVWpN0cxntcdwfazR3n4qrdpaNd5mjnus5d5zcHvngG+/xLhJxii82+OM8kMObB1nQuXqnDQjyvgafHXHHblyuugRPfM7dccErewGmxWJt2tV6umrq9b9tFBNjMiZ/xf8eNGCNzDOn2OYxuBr9dbkAnfv9G7fibgLngt0sG9r459unIPkvBlXm8pj9pfQX3PJcC7DZe5rH7R4DvE+xrFkQ3s+zbE+wzV6He33bvTzPhfyL0J00qwamENoxlJbAqgfUe7PAfGc+V8sIT7yz2rOIYAAA=","debug_symbols":"tdnLaoNAFIDhd5m1C29zLr5KKUETDYJoUFMo4rvXtKEEsv434tEz/+5bzRYubXO/nvqxm5ZQfWxhmM712k/jMW17Epq5H4b+enr9HNLHo8x/95dbPT7GZa3nNVRFmYR2vBwvfpzu+qENlaZ78rao+XNR9X8x+v6ZhLKgwiUVjlRYqLBSYaPCDoVjSoUzKkzJi5S8SMmLlLxIyYuUvEjJi5Q8oeQJJU8oeULJE0qeUPKEkieUPKHkCSVPKXlKyVNKnlLylJKnlDyl5CklTyl5SskzSp5R8oySZ5Q8o+QZJc8oeUbJM0qeUfKckueUPKfkOSXPKXlOyXNKnlPynJLnlLwsTbFyhpVzrFxg5RIrR6wsWFmxsmFlzGDGGNyP6aue+7oZ2ueVQXcfzy83COv37e/PsfwD","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"add_signer_final","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"signer","type":{"kind":"string","length":130},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["add_signer_final"]},{"name":"sign_doc","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"signer","type":{"kind":"string","length":130},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_keys_and_partial_address","get_key_validation_request","decompose_hint","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_invert"]},{"name":"end_sign","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/81XS2/TQBDetHZjJw2JeEiAOBiJGxySUiHgQiuEQBxaUQ5cQMLUTlgpsSvH6YNfTzbMxF9Gm7QhNmKkaMbebx47Mzvr1FRBNeKuWkIG4KjVtCOMGWqB3CZ+lOaBTnSuw6H+FUcIfwryQ+LHyfAqCKORToLTMAniJArGepDoZICab0B+QPwwy8KrqasovgzSSR6k/eBHOkmiMSq+B/kR8TDP49FZHuTp1HEUXOj8Z5Cex1l/mF6g7qe/dfp1TafznE6I+9PfFslcmwN67m5GPR+CK9X2y/3nxvZ2NXF3fVX0aNm261Mbb70/tjh+9mVe10m+Azim3emvw0U+Hx2fnaZRfBhFWTxeaAqMfRXd1J67hr370t7RZDjUfR1n7y71OF+wazvnRt5SRU/ifjAWXEeStTO4A3rubka9Gvh3yPaOiNEFzC3it6+JU5UXY7cFMaEvrGGJ/bwne8JWq4ZarHWZMwZrwv7ZF/eIyUldxNSBdxxzG9YxXmlf9mAH8C74lJfgqlyhLRlDRb0ym88V1WU2Q+vV2O6Z3G6LHBn+GPx5kGPHgncB8xHWnpDchnU8O3inOYDBO7QhML7wjX3G2F1VfNfMZ+fn6TdKnGHbeODmOvIhfFfou7D+jPiyMYW30AHx7ma0bzsePsT0L8cU+2yoysZkz9Y6coy0VNEOjO3AOwdwtvZ/AbH7oLOs/RnzGtZekdwkHcawPhO2uCdi9kmfYyk7j7uwB9xbE94zhv3aehttKWWvSQ3sMoZ12G8b9s5Yg7lHcnGc8zQLB/GXTOexEoTfM5hc37IuNyHnDQeG8xdnEGJYFxviA3Fb0loWXWw+29y8aSNxgzPWJPEuyTKJJ3G48IcPBwdSzeJLYv6nhj0hvjT3lFw8dI5XSex7xux38D3vFfAnDxBj1jlAHcBgHT2ht05f2y66b8RtucXvLt5Dy2IPvzNMr+/wfznISd0rYnYAswUxMSYCu33w6wq7Zj23rDOtuuC4P2YXbDW90p3NIa/YnwO+HNg/YxoQhwvPGeyn6S3uh3PBdmezhuSmt1zPFXodwHig5ws9X9TN1ECT3FCL56DMmYG1NufiNznUkFZhEwAA","debug_symbols":"1ZrdbuIwEIXfJddc2OOfmeFVVqsKWqgiIaiArrRCvPsmLXZASW1tW6qZG0TgZOaLcTj2TE7N02r5+vzQbte7QzP/dWo2u8fFsd1tu6PTedYs9+1m0z4/XH/cmP4F3+SHl8W2PzocF/tjM7cIftastk/9W+e7AOt2s2rmaM6zkZgdXrQcMEtthAmtB8sXsQegQW3shDqSdRd1JOAb9e9ZQ19G7wJlsbkS/wA8f33cMcVnro27BZ/EFpgr6GRDwiB7Hfsd3ZpvZO/G/Ra+T2DvnQDuncDdO4GfSuBDyDM0INYmP1LK0KUYMlCYUAeOKXRgNpUZFNDZpEYHoxkUVNNH1fSomp5U07NmejCq6a1qelBN71TTq/ZaUO21oNprQbXXOul3baBMH0YbLCd95qDP9GRG9D8/c/KeLxoTKvTWcBxiD2pnwxs9qaZnzfT+g1Uape2kj33YEr13BEnsqjM5csz0jKP70FfXXdHcbIX7c+AT57j/PydMO3vENMAeDVR+aYiQKytElV86OpuKZdG5Wh0mdsGT2sKoDhNIOD3aTE92RM/C6UMs0EcjnD7f7tHyyNmjVU0Pqumdanrp/5hl+qCaPqqmR+H0HgZ6V1F3C7ah6UU0ulbpzvzxtfb00p25SI/SnblML92Zy/Rec8UAhVfKyOZqDcFoRYrS6x151zpJL71Slr2to4eaO3Qb6OQOHsfXKr2HVaxMofQeVpGepPewyvTSe1hleuk9rDK99Gp4mV66M5fppfewyvSqOxEk3ZnL9Kq9llR7Lav2Wlbttazaa1mx1567wz+LfbtYblaXp6/Xr9vHq4exj39f3r/pxP8A","brillig_names":["end_sign"]},{"name":"add_signer","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"signer","type":{"kind":"string","length":130},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["add_signer"]},{"name":"get_sign","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"signer","type":{"kind":"string","length":130},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_sign"]},{"name":"get_all_signers","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"array","length":1000,"type":{"kind":"field"}},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_all_signers"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"DocumentSigning::get_all_signers_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"DocumentSigning::get_all_signers_parameters","fields":[]}},{"name":"return_type","type":{"kind":"array","length":1000,"type":{"kind":"field"}}}]},{"kind":"struct","path":"DocumentSigning::add_signer_final_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"DocumentSigning::add_signer_final_parameters","fields":[{"name":"signer","type":{"kind":"string","length":130}}]}}]},{"kind":"struct","path":"DocumentSigning::sign_doc_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"DocumentSigning::sign_doc_parameters","fields":[{"name":"signer","type":{"kind":"string","length":130}}]}}]},{"kind":"struct","path":"DocumentSigning::add_sign_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"DocumentSigning::add_sign_parameters","fields":[{"name":"signer","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"DocumentSigning::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"DocumentSigning::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"documentHash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"DocumentSigning::add_signer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"DocumentSigning::add_signer_parameters","fields":[{"name":"signer","type":{"kind":"string","length":130}}]}}]},{"kind":"struct","path":"DocumentSigning::end_sign_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"DocumentSigning::end_sign_parameters","fields":[]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"DocumentSigning"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"documentHash","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"signers","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"signingEnded","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"active_at_block","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}}]}}]}]}},"file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n","path":"std/array/mod.nr"},"13":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U where T: From<U> {\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n","path":"std/convert.nr"},"24":{"source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"25":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n","path":"std/hash/mod.nr"},"34":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"58":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"59":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"66":{"source":"use crate::collections::vec::Vec;\nuse crate::convert::From;\n\nimpl<let N: u32> str<N> {\n    /// Converts the given string into a byte array\n    #[builtin(str_as_bytes)]\n    pub fn as_bytes(self) -> [u8; N] {}\n\n    /// return a byte vector of the str content\n    pub fn as_bytes_vec(self: Self) -> Vec<u8> {\n        Vec::from_slice(self.as_bytes().as_slice())\n    }\n}\n\nimpl<let N: u32> From<[u8; N]> for str<N> {\n    fn from(bytes: [u8; N]) -> Self {\n        bytes.as_str_unchecked()\n    }\n}\n","path":"std/string.nr"},"70":{"source":"use dep::aztec::macros::aztec;\n\n#[aztec]\ncontract DocumentSigning {\n     use dep::compressed_string::CompressedString;\n     use dep::aztec::prelude::{\n        AztecAddress, Map, PublicMutable, SharedImmutable\n    };\n    use dep::aztec::{\n        keys::getters::get_public_keys,\n        macros::{storage::storage, functions::{public, initializer, private, internal}}\n    };\n    use dep::aztec::oracle::debug_log::{ debug_log };\n\n    #[storage]\n    struct Storage<Context> {\n        admin: PublicMutable<AztecAddress, Context>,\n        documentHash: SharedImmutable<Field, Context>,\n        //documentHash: SharedImmutable<FieldCompressedString>, //currently MD5 hash\n        //signers: Map<Field, PublicState<bool>>, //list with signers (in bytestream) and their respective hasSigned t/f\n        //problem: bool is not nullable, so we have to use Field with 0(doesnt exist),1(not signed),2(signed)\n        signers: Map<Field, PublicMutable<Field, Context>, Context>,\n        signingEnded: PublicMutable<bool, Context>,\n        active_at_block: SharedImmutable<u32, Context>, // when people can start signing\n    }\n\n    #[public] // annotation to mark function as private and expose private context\n    #[initializer] // annotation to mark function as a constructor\n    fn constructor(admin: AztecAddress, documentHash: Field) { // called when contract is deployed\n        debug_log(\"JAN THANEI CONSTRUCTOR\");\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.documentHash.initialize(documentHash);\n        //storage.documentHash.initialize(sha256_to_field(documentHash));\n        //storage.documentHash.initialize(FieldCompressedString::from_string(documentHash));\n        storage.signingEnded.write(false);\n        storage.active_at_block.initialize(context.block_number() as u32);\n    }\n\n    #[private] // annotation to mark function as private and expose private context\n    fn sign_doc(signer: str<130>) {\n        //v056 changes\n        let msg_sender_npk_m_hash = get_public_keys(context.msg_sender()).npk_m.hash();\n        let secret = context.request_nsk_app(msg_sender_npk_m_hash); // get secret key of caller of function\n        let nullifier = std::hash::pedersen_hash([context.msg_sender().to_field(), secret]); // derive nullifier from sender and secret\n\n        let signer_s: CompressedString<5,130> = CompressedString::from_string(signer);\n        context.push_nullifier(nullifier);\n        DocumentSigning::at(context.this_address()).add_sign(signer_s.serialize()[0]).enqueue(&mut context);\n\n        //old before v056\n        //let secret = context.request_nullifier_secret_key(context.msg_sender()); // get secret key of caller of function\n        //let nullifier = dep::std::hash::pedersen_hash([context.msg_sender().to_field(), secret.low, secret.high]); // compute nullifier with this secret key so others can't descrypt it\n        //let signer_s: CompressedString<5,130> = CompressedString::from_string(signer);\n        //context.push_new_nullifier(nullifier, 0); // push nullifier\n        //context.call_public_function(\n        //    context.this_address(),\n        //    FunctionSelector::from_signature(\"add_sign(Field)\"),\n        //    [signer_s.serialize()[0]]\n        //);\n    }\n    \n    #[public]\n    #[internal]\n    fn add_sign(signer: Field) {\n        assert(storage.signingEnded.read() == false, \"Signing has ended\");\n        \n        let current_status = storage.signers.at(signer).read();\n        assert(current_status != 0, \"Given signer doesn't exist in signer list\");\n        \n        if current_status == 1 {\n            storage.signers.at(signer).write(2);\n        } else if current_status == 2 {\n            assert(false, \"Signer has already signed the document\");\n        }\n    }\n\n    #[public]\n    fn add_signer_final(signer: str<130>) {\n        let signer_s: CompressedString<5,130> = CompressedString::from_string(signer);\n        let signer_serialized = signer_s.serialize()[0];\n        assert(storage.signers.at(signer_serialized).read() == 0, \"Given signer already exists\");\n        storage.signers.at(signer_serialized).write(1);\n    }\n\n    #[public]\n    fn add_signer(signer: str<130>) {\n        // Call add_signer_final directly without using enqueue\n        add_signer_final(signer);\n    }\n\n    unconstrained fn get_sign(signer: str<130>) -> pub Field {\n        let signer_s: CompressedString<5,130> = CompressedString::from_string(signer);\n        storage.signers.at(signer_s.serialize()[0]).read()\n    }\n\n    #[public] \n    fn end_sign() {\n        assert(storage.admin.read().eq(context.msg_sender()), \"Only admin can end signing\"); // assert that caller is admin\n        storage.signingEnded.write(true);\n    }\n\n#[public]\nfn get_all_signers() -> pub [Field; 1000] {\n    let mut signers = [0; 1000];\n    let mut count = 0;\n    for i in 0..1000 {\n        let field_i = Field::from(i as u8);\n        let signer_status = storage.signers.at(field_i).read();\n        if signer_status != 0 {\n            signers[count] = field_i;\n            count += 1;\n        }\n    }\n    signers\n}\n}\n","path":"/Users/jan.thanei/Desktop/frontend/contracts/signing/src/main.nr"},"99":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"100":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"101":{"source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"102":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"122":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"123":{"source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"128":{"source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"129":{"source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"130":{"source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"131":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(address: Field, storage_slot: Field, block_number: Field, length: Field) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field\n    )\n}\n\nunconstrained pub fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"136":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"162":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"163":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"168":{"source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"169":{"source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr"},"176":{"source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr"},"177":{"source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"185":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"230":{"source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"239":{"source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"285":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"305":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"308":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"310":{"source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"311":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"314":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"315":{"source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"322":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        debug_log_oracle_wrapper(msg, args)\n    };\n}\n\nunconstrained pub fn debug_log_oracle_wrapper<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"323":{"source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"324":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"338":{"source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\npub struct CompressedString<let N: u32, let M: u32> {\n  value: [Field; N]\n}\n\nimpl<let N: u32, let M: u32> CompressedString<N, M> {\n    pub fn from_string(input_string: str<M>) -> Self {\n        let mut fields = [0; N];\n        let byts = input_string.as_bytes();\n\n        let mut r_index = 0 as u32;\n\n        for i in 0..N {\n            let mut temp = [0 as u8; 31];\n            for j in 0..31 {\n                if r_index < M {\n                    temp[j] = byts[r_index];\n                    r_index += 1;\n                }\n            }\n\n            fields[i] = field_from_bytes(temp, true);\n        }\n\n        Self { value: fields }\n    }\n\n    pub fn to_bytes(self) -> [u8; M] {\n        let mut result = [0; M];\n        let mut w_index = 0 as u32;\n        for i in 0..N {\n            let bytes: [u8; 31] = self.value[i].to_be_bytes();\n            for j in 0..31 {\n                if w_index < M {\n                    result[w_index] = bytes[j];\n                    w_index += 1;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let M: u32> Eq for CompressedString<N, M> {\n    fn eq(self, other: CompressedString<N, M>) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Serialize<N> for CompressedString<N, M> {\n    fn serialize(self) -> [Field; N] {\n        self.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Deserialize<N> for CompressedString<N, M> {\n    fn deserialize(input: [Field; N]) -> Self {\n        Self { value: input }\n    }\n}\n\n#[test]\nunconstrained fn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1,11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_serde() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n\n    assert_eq(name, CompressedString::deserialize(name.serialize()));\n}\n\n#[test(should_fail)]\nunconstrained fn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n","path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/compressed-string/src/compressed_string.nr"}}}