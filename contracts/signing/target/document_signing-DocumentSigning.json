{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-aarch64","name":"DocumentSigning","functions":[{"name":"add_signer","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"signer","type":{"kind":"string","length":130},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAAQIxQAAJAAEggQkAAQABR8AAAAABQAAAAQAAAhDHQACCEMIQx0AAghECEQdAAIIRQhFHQACCEYIRh0AAghHCEcdAAIISAhIHQACCEkISR0AAghKCEodAAIISwhLHQACCEwITB0AAghNCE0dAAIITghOHQACCE8ITx0AAghQCFAdAAIIUQhRHQACCFIIUh0AAghTCFMdAAIIVAhUHQACCFUIVR0AAghWCFYdAAIIVwhXHQACCFgIWB0AAghZCFkdAAIIWghaHQACCFsIWx0AAghcCFwdAAIIXQhdHQACCF4IXh0AAghfCF8dAAIIYAhgHQACCGEIYR0AAghiCGIdAAIIYwhjHQACCGQIZB0AAghlCGUdAAIIZghmHQACCGcIZx0AAghoCGgdAAIIaQhpHQACCGoIah0AAghrCGsdAAIIbAhsHQACCG0IbR0AAghuCG4dAAIIbwhvHQACCHAIcB0AAghxCHEdAAIIcghyHQACCHMIcx0AAgh0CHQdAAIIdQh1HQACCHYIdh0AAgh3CHcdAAIIeAh4HQACCHkIeR0AAgh6CHodAAIIewh7HQACCHwIfB0AAgh9CH0dAAIIfgh+HQACCH8Ifx0AAgiACIAdAAIIgQiBHQACCIIIgh0AAgiDCIMdAAIIhAiEHQACCIUIhR0AAgiGCIYdAAIIhwiHHQACCIgIiB0AAgiJCIkdAAIIigiKHQACCIsIix0AAgiMCIwdAAIIjQiNHQACCI4Ijh0AAgiPCI8dAAIIkAiQHQACCJEIkR0AAgiSCJIdAAIIkwiTHQACCJQIlB0AAgiVCJUdAAIIlgiWHQACCJcIlx0AAgiYCJgdAAIImQiZHQACCJoImh0AAgibCJsdAAIInAicHQACCJ0InR0AAgieCJ4dAAIInwifHQACCKAIoB0AAgihCKEdAAIIogiiHQACCKMIox0AAgikCKQdAAIIpQilHQACCKYIph0AAginCKcdAAIIqAioHQACCKkIqR0AAgiqCKodAAIIqwirHQACCKwIrB0AAgitCK0dAAIIrgiuHQACCK8Irx0AAgiwCLAdAAIIsQixHQACCLIIsh0AAgizCLMdAAIItAi0HQACCLUItR0AAgi2CLYdAAIItwi3HQACCLgIuB0AAgi5CLkdAAIIugi6HQACCLsIux0AAgi8CLwdAAIIvQi9HQACCL4Ivh0AAgi/CL8dAAIIwAjAHQACCMEIwR0AAgjCCMIdAAIIwwjDHQACCMQIxCUABAhDAAMkAASCBCoAAAUkAASDBgAABAAGACQBBAEFAAAEBQIGKwAAAwgDKwAABggEKwAABAgFIgAAAJUqAAUDIgAAAKA5AAAACMUAAAAAJQAEAAAIBw0ABAgHCAUICBcACAgICCEAAJ8ICAEABAgDCAcICSsBCAkIBgEABAgECAcICSsCCAYICQEABAgHAAIIByAAliMeAAAABR4AAAAGMAAAAAAFAAAABgAAAAckAAIBBQoAAgcFBiEAAKcABjoBAAAeAAAABx4AAAAGMAAAAAAHAAAABgAAAAgKAAIIBQYhAACtAAY6AQAAKgAABSQABAYIAAAEAAgAJAEEAQUAAAQFAggqAAgGJAAHAAcqAgcGAAAEBgIGKgIHBgAABAYCBioCBwYAAAQGAgYqAgcGAAAEBgIGKgIHBioBBQgAAAQIAggqAggFKgAACAAABAACACoCBQgqAAAFAAAEAAIAJAAEAAYqAgYFJAAEggkqAAAKJAAEIAsAAAQACwAkAQQBCgAABAoCCyQAAgAMJAAEHw0AAAQNCw0qAAsODAAEDg0PFgAPDyEAANcADyoCDA4AAAQOAg4gANEkAAQFCyQABAENJAAHAQ4kAAQfDyUABwEAABAqAAYEIADeDAAEBAsRIQADJQARIADhKgEICwAABAsCCgAABAoGCSoBCQgqAAALJAAEBAoAAAQACgAkAQQBCwAABAsCCioACgkqAgcJAAAECQIJKgIHCQAABAkCCSoCBwkqAQsKAAAECgIKKgIKCyoBCwoAAAQKAgoqAgoLKgELCgAABAoCCioCCgsqAQsKAAAECgIKKgIKCyoAAAoAAAQAAgAqAgsKKAAHAAAAAAAAAAIAAAAAAAAAAAAJKgAABSQABAUEAAAEAAQAJAEEAQUAAAQFAgQqAAQDKgIHAwAABAMCAyoCBwMAAAQDAgMqAgcDAAAEAwIDKgIJAyoBBQQAAAQEAgQqAgQFKgAABAAABAACACoCBQQqAAADAAAEAAIAKgIGAyoAAA8AAAQAAgAkAAEAECoCEA8kAAQCESQABwMSJAAEAxMkAAQEFCoABgwgASAMAAQMERUqAAAWJAAEAxcAAAQAFwAkAQQBFgAABBYCFyoAFxgqAhIYAAAEGAIYKgIIGCEAAqMAFSABLCoBDwwKAAEMEBchAAEwABc6AQAAKgAGFSABMgwABBUTDCEAAnoADCABNSoBBAwqAAAKJAAEBQMAAAQAAwAkAQQBCgAABAwCAyQABAQXAAAECgIYPgMAAAADAAAAGCoCCgQkAAEBBCoCBA8AAAQKAgwAAAQMBhgqARgPCgAHDwcKCgABChAMIQABSAAMOgEAACoAAAokAAQCDAAABAAMACQBBAEKAAAECgIMKgAMGCoCBxgqAQoMAAAEDAIMKgIMCioAAAwAAAQAAgAqAgoMKgAGFSABVwoABBUGCiEAAmQACiABWioBDA8AAAQPAgoAAAQKBgMqAQMMCgAHDAcPIQABYQAPOgEAACoBCwwAAAQMAgwqAgwLKgELDAAABAwCDCoCDAsqAQsMAAAEDAIMKgIMCyoBCwwAAAQMAgwqAgwLKgAADAAABAACACoCCwwqAQULAAAECwILKgILBSoAAAsAAAQAAgAqAgULKgAACQAABAACACoCBgkqAAAFAAAEAAIAKgIQBSoABhUgAX4MAAQVEQ8hAAHiAA8gAYEqAQURCgABERAPIQABhQAPOgEAACoABhIgAYcMAAQSExEhAAG5ABEgAYoqAQsSKgAAESQABAUPAAAEAA8AJAEEAREAAAQSAg8kAAQEDAAABBECCj4DAAAADwAAAAoqAhELKgIEBQAABBECBAAABAQGCyoBCwUKAAcFBxEKAAEREAchAAGcAAc6AQAAKgAAESQABAIQAAAEABAAJAEEAREAAAQRAhAqABAHKgIOByoABhMgAaUKAAQTBhIhAAGpABIgAagjHAAHExIAAAcFEhAkAAQBDwwABBMPDCEAAa8ADDoBAAAAAAQRAgwAAAQMEw8qAQ8SLQAAAAASAAAAEAAABBMNEg4ABBMSECEAAbcAEDoBAAAqABITIAGlKgEJEQwABBIRDyEAAb0ADyAB3CoBCxEqAQsPJAAEBAgMAAQSCAMhAAHDAAM6AQAAAAAEDwIDAAAEAxIIKgEICioBDA8kAAQDCAwABBIIFSEAAcsAFToBAAAAAAQPAhUAAAQVEggqAQgDAAAHCgMPJAAEBAoMAAQSChUhAAHTABU6AQAAKwAAEQgDJQAEAAUIBCIAAAOUKwAIBQADAAAEAwIVAAAEFRIKKgIPCioCAwsgAdwAAAQSDREOAAQSEQ8hAAHgAA86AQAAKgAREiABhwwABBURDyEAAeUADyACNSQABAIKDAAEFQoDIQAB6QADOgEAAAAABBYCAwAABAMVCioBCg8qAQUDCgABAxAKIQAB8AAKOgEAACoBCQMKAAQDEwohAAIMAAogAfQqAQwKKgEJAyoBCRckAAQDGQwABBcZGiEAAfsAGjoBAAArAAAKCAMlAAQABAgEIgAAA5QrAAgFABgAAAQYAhoAAAQaFxkqAg8ZKgEYDwAABA8CDyoCDxgAAAQDDQ8OAAQDDxchAAIJABc6AQAAKgIYDCoCDwkgAjUqAAYKIAIODAAEChMDIQACOwADIAIRKgEMCioBCwMqAAAXJAAEBRgAAAQAGAAkAQQBFwAABAMCGCQABAQZAAAEFwIaPgMAAAAYAAAAGioBCgMCAAQDAgMqAgMKKgEKAwAABAMCAyoCAwoqARcDAAAEAwIDKgIDFysAAAoIAyUABAAECAQiAAADlCsACAUAAwAABAMCGgAABBoGGSoCDxkqAQMKAAAECgIKKgIKAyoBFwoAAAQKAgoqAgoXKgIDDCoCFwsqAg0JIAI1AAAEFQ0PDgAEFQ8KIQACOQAKOgEAACoADxUgAX4qAQkDDAAECgMXIQACPwAXIAJeKgELAyoBCxckAAQEGQwABAoZGiEAAkUAGjoBAAAAAAQXAhoAAAQaChkqARkYKgEMFyQABAMZDAAEChkbIQACTQAbOgEAAAAABBcCGwAABBsKGSoBGRoAAAcYGhckAAQEGgwABAoaGyEAAlUAGzoBAAArAAADCAMlAAQABQgEIgAAA5QrAAgFABgAAAQYAhsAAAQbChoqAhcaKgIYCyACXgAABAoNAw4ABAoDFyEAAmIAFzoBAAAqAAMKIAIOKgEMChwABxUDAAAHDwMXLAAAAAAXAAAAAyQABAEYDAAEFRgZIQACbAAZOgEAACsAAAoIAyUABAACCAQiAAADlCsACAUAFwAABBcCGQAABBkVGCoCAxgAAAQVDQoOAAQVCgMhAAJ3AAM6AQAAKgIXDCoAChUgAVcqAQMMDAAEFQwXIQACfgAXIAKdKgEEDCoBBBckAAQEGQwABBUZGiEAAoQAGjoBAAAAAAQXAhoAAAQaFRkqARkYKgEKFyQABAMZDAAEFRkbIQACjAAbOgEAAAAABBcCGwAABBsVGSoBGRoAAAcYGhckAAQEGgwABBUaGyEAApQAGzoBAAArAAAMCAMlAAQABQgEIgAAA5QrAAgFABgAAAQYAhsAAAQbFRoqAhcaKgIYBCACnQAABBUNDA4ABBUMFyEAAqEAFzoBAAAqAAwVIAEyDAAEDBEVIQACpgAVIAL2JAAEAhcMAAQMFxghAAKqABg6AQAAAAAEFgIYAAAEGAwXKgEXFSoBDxYKAAEWEBghAAKxABg6AQAAKgEDFgoABBYTGCEAAs0AGCACtSoBChYqAQMXKgEDGCQABAMaDAAEGBobIQACvAAbOgEAACsAABYIAyUABAAECAQiAAADlCsACAUAGQAABBkCGwAABBsYGioCFRoqARkWAAAEFgIWKgIWGQAABBcNFg4ABBcWFSEAAsoAFToBAAAqAhkKKgIWAyAC9ioABhYgAs8MAAQWExchAAL8ABcgAtIqAQoWKgEEFyoAABgkAAQFGQAABAAZACQBBAEYAAAEFwIZJAAEBBoAAAQYAhs+AwAAABkAAAAbKgEWFwIABBcCFyoCFxYqARYXAAAEFwIXKgIXFioBGBcAAAQXAhcqAhcYKwAAFggDJQAEAAQIBCIAAAOUKwAIBQAXAAAEFwIbAAAEGwYaKgIVGioBFxUAAAQVAhUqAhUXKgEYFQAABBUCFSoCFRgqAhcKKgIYBCoCDQMgAvYAAAQMDRUOAAQMFRYhAAL6ABY6AQAAKgAVDCABICoBAxcMAAQWFxghAAMAABggAx8qAQQXKgEEGCQABAQaDAAEFhobIQADBgAbOgEAAAAABBgCGwAABBsWGioBGhkqAQoYJAAEAxoMAAQWGhwhAAMOABw6AQAAAAAEGAIcAAAEHBYaKgEaGwAABxkbGCQABAQZDAAEFhkcIQADFgAcOgEAACsAABcIAyUABAAFCAQiAAADlCsACAUAGwAABBsCHAAABBwWGSoCGBkqAhsEIAMfAAAEFg0XDgAEFhcYIQADIwAYOgEAACoAFxYgAs8qAQoSAAAEEgISKgISCioAABIAAAQAAgAqAgoSKgAGESADLQwABBEPEyEAA24AEyADMCoBCBMqARIUKgAAEgAABAACACoCBxIqAAAVAAAEAAIAKgIOFSoABhEgAzoMAAQRDxYhAANQABYgAz0qARIRJAAEBRQMAAQEFBUhAANCABU6AQAAKwAAEwgDJQAEAAYIBCIAAAOUKwAIBQASAAAEEgIVAAAEFQQUKgIRFAAABAQNEQ4ABAQREyEAA00AEzoBAAAqAhIIKgARBCAA3gIABA8RFg4ABBEPFyEAA1QAFzoBAAACAAQWDRcOAAQNFhghAANYABg6AQAAKgESFiQABB8ZDAAEFxkaIQADXQAaOgEAAAAABBQCGgAABBoXGSoBGRgcAAcYFyoBFRgEAAcXGBoAAAcWGhgqAhgSKgEVGAQABxgQGioCGhUAAAQRDRoOAAQRGhghAANsABg6AQAAKgAaESADOioBBRMMAAQTCRQhAANyABQgA44qARITKgEFFCQABIIWDAAEFBYXIQADeAAXOgEAAAAABAMCFwAABBcUFioBFhUkAAQfFwwABBEXFiEAA38AFjoBAAArAAATCAMlAAQAIAgEIgAAA5QrAAgFABQAAAQUAhYAAAQWERcqAhUXKgIUEioBBRQAAAQUDRUOAAQUFRMhAAOMABM6AQAAKgIVBSADjgAABBENEw4ABBETFCEAA5IAFDoBAAAqABMRIAMtKwEIAwgGCwAECAYAAggHIQADmAgHIAOaKwAIAwgFIAOoKwAAAAgFAQAEAAAIBAAAJQAEAAAICQ0ABAgJCAQIChcACAoICiEAA6YICgEABAgDCAkICysBCAsICAEABAgFCAkICysCCAgICwEABAgJAAIICSADnSUBBAABCAUgA6gjKwAYyhjK","debug_symbols":"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","brillig_names":["add_signer"],"assert_messages":{"506":"Array index out of bounds","887":"Array index out of bounds","430":"Array index out of bounds","619":"Array index out of bounds","488":"Array index out of bounds","875":"attempt to add with overflow","802":"attempt to add with overflow","479":"attempt to add with overflow","860":"Array index out of bounds","659":"Array index out of bounds","851":"attempt to subtract with overflow","781":"Array index out of bounds","458":"Array index out of bounds","327":"Storage slot 0 not allowed. Storage slots must start from 1.","580":"Array index out of bounds","833":"Array index out of bounds","894":"Array index out of bounds","699":"Array index out of bounds","568":"attempt to add with overflow","172":"Not initialized","681":"Array index out of bounds","166":"Not initialized","352":"Given signer already exists","672":"attempt to add with overflow","855":"attempt to subtract with overflow","596":"Array index out of bounds","913":"attempt to add with overflow","651":"Array index out of bounds","520":"attempt to add with overflow","773":"Array index out of bounds","450":"Array index out of bounds","907":"attempt to add with overflow","761":"attempt to add with overflow","438":"attempt to add with overflow","630":"attempt to add with overflow","609":"attempt to add with overflow","411":"Storage slot 0 not allowed. Storage slots must start from 1.","789":"Array index out of bounds","466":"Array index out of bounds","588":"Array index out of bounds","713":"attempt to add with overflow","844":"attempt to add with overflow","643":"Array index out of bounds"}},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"documentHash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAAQIRQAAJAAEAgUkAAQABh8AAAAABgAAAAUAAAhDKwAIQwADKwAIRAAEIgAAAAk5AAAACEUAAAAAHgAAAAsqAAAMJAAEBw0AAAQADQAkAQQBDAAABAwCDTMCAAAACwAAAA0qAQwLAAAECwILKgILDCoAAAsAAAQAAgAqAAANAAAEAAIAKgEMDgAABA4CDioCDgwkAAQADgAABAwCEAAABBAOESoBEQ8qAgwLJAAEAQwqAgwNJAAHABAKAAcPEBEkAAEADyQABAQSJAABARMkAAQDFCQABAIVIQAAhQARIAAqKgAAFgAABAACACoAABckAAQGGAAABAAYACQBBAEXAAAEFwIYKgAYGSoCEBkAAAQZAhkqAhAZAAAEGQIZKgIQGQAABBkCGSoCEBkAAAQZAhkqAhAZKgIXFioBFxgAAAQYAhgqAhgXJAAEBRgqAA4RIABCDAAEERgZIQAAZQAZIABFKgENEQAABBEYCw4ABBELGSEAAEoAGToBAAAqAgsNKgEWCyoBFxYCAAQWAhYqAhYXAAAECwIWAAAEFg4NKgENFwAABAsCDQAABA0MESoBERYAAAQLAhEAAAQRFRgqARgNAAAECwIYAAAEGBQZKgEZEQAABAsCGQAABBkSGioBGhgqABMFKgAXBioAFgcqAA0IKgARCSoAGAogAIwqARYZKgELGioBDRsAAAQbERwOAAQbHB0hAABsAB06AQAAJAAEBh0MAAQcHR4hAABwAB46AQAAAAAEGgIeAAAEHhwdKgEdGyQABAUcDAAEERweIQAAdwAeOgEAACsAABkIAyUABAAGCAQiAAADoysACAUAGgAABBoCHgAABB4RHCoCGxwAAAQRDBsOAAQRGxkhAACCABk6AQAAKgIaFioAGxEgAEIqAA8FKgAQBioAEAcqABAIKgAQCSoAEAogAIwhAACOAAU6AQAAKgAABSQABAINAAAEAA0AJAEEAQUAAAQFAg0fBAAAAA4AAAAMAAAADQAABAUCCwAABAsOFioBFg0cAAQNCxwABwsFKgAADSQABAMLAAAEAAsAJAEEAQ0AAAQNAgsfBAAAAAwAAAAVAAAACyoAAAsAAAQAAgAqAAAWJAAEBRcAAAQAFwAkAQQBFgAABBYCFyoAFxgqAhAYAAAEGAIYKgIQGAAABBgCGCoCEBgAAAQYAhgoAAcAAAAAAAAAAwAAAAAAAAAAABkqAhkYKgEWFwAABBcCFyoCFxYqAAAXAAAEAAIAKgAAGAAABAACACoAABoAAAQAAgAqARYbAAAEGwIbKgIbFioBFhsAAAQbAhsqAhsWJAAHLBsqAAAcJAAEBB0AAAQAHQAkAQQBHAAABBwCHSoAHR4qAhseAAAEHgIeKgIQHgAABB4CHioCEB4qARwdAAAEHQIdKgIdHCoBFh0AAAQdAh0qAh0WKgIcCyoCFhcqAgwYKgIPGioBHB0CAAQdAh0qAh0cKgEWHAIABBwCHCoCHBYqAA4RIADcDAAEERUKIQADJAAKIADfKgEaDQoAAQ0PCiEAAOMACjoBAAAqAA4RIADlDAAEERQNIQAC+wANIADoKgEXESoAAA0kAAQFCwAABAALACQBBAENAAAEEQILJAAEBAoAAAQNAgg+AwAAAAsAAAAIKgINFyoCExoAAAQNAhcAAAQXDhEqAREaKgAADQAABAACACoBFhcAAAQXAhcqAhcWKgAAFwAABAACACoAABEAAAQAAgAqAAAIAAAEAAIAKgEWCgAABAoCCioCChYqARYKAAAECgIKKgIKFiQABw0KKgAACyQABAQGAAAEAAYAJAEEAQsAAAQLAgYqAAYbKgIKGwAABBsCGyoCEBsAAAQbAhsqAhAbKgELBgAABAYCBioCBgsqARYGAAAEBgIGKgIGFioCCw0qAhYXKgIMESoCDwgqAQsGAgAEBgIGKgIGCyoBFgsCAAQLAgsqAgsWKgAOGCABJQwABBgVGSEAAnMAGSABKCoBCBUKAAEVDwshAAEsAAs6AQAAKgAOFiABLgwABBYUFSEAAkoAFSABMSoBFxUqAAAUJAAEBREAAAQAEQAkAQQBFAAABBUCESQABAQNAAAEFAILPgMAAAARAAAACyoCFBcqAhMIAAAEFAIXAAAEFw4SKgESCAoABwkIFCEAAUIAFDoBAAAKAAcHEAgeAAIACQoABwcJFBIAAQgUByEAAUgABzoBAAAKAAcDEAcKAAEHDxMhAAFMABM6AQAAJAAHAQ8qAA4WIAFPCgAEFg4VIQACMwAVIAFSKgAADSQABAILAAAEAAsAJAEEAQ0AAAQNAgsqAAsKKgIQCioBDQsAAAQLAgsqAgsNKgAACwAABAACACoCDQsmAAc7msoCAAoqAA4PIAFiCgAEDw4JIQACHQAJIAFlKgELCQAABAkCCAAABAgOByoBBwsKAAcLEAkhAAFsAAk6AQAAJQAH3q0ACyoAAAkkAAQCCAAABAAIACQBBAEJAAAECQIIKgAIByoCCwcqAA4PIAF2CgAEDw4IIQACDQAIIAF5JAAHAgoqAA4PIAF8CgAEDw4IIQAB9gAIIAF/JAAHBAoqAA4PIAGCCgAEDw4IIQAB5gAIIAGFHgAHAAocAAQKBxwABwcIKgENCgAABAoCCioCCg0qAAAKAAAEAAIAKgINCiYABzuaygUADSoADg8gAZEKAAQPDgchAAHQAAcgAZQqAQoHAAAEBwIGAAAEBg4FKgEFCgoABwoQByEAAZsABzoBAAAqAA4PIAGdCgAEDw4KIQABwAAKIAGgJAAHBQsqAA4NIAGjCgAEDQ4KIQABqQAKIAGmHgAAAAMxAAAAAAMjHAAHDQoAAAcLCgkqAAAKJAAEAgcAAAQABwAkAQQBCgAABAoCByoABwYqAggGJAAEAQYMAAQNBgUhAAG2AAU6AQAAAAAECgIFAAAEBQ0GKgEGBy0AAAAABwAAAAkAAAQNDAkOAAQNCQchAAG+AAc6AQAAKgAJDSABoxwABw8KAAAHDQoHJAAEAQYMAAQPBgUhAAHGAAU6AQAAAAAECQIFAAAEBQ8GKgEGCi0AAAAACgAAAAcAAAQPDAcOAAQPBwohAAHOAAo6AQAAKgAHDyABnSoBCgccAAcPBgAABw0GBSwAAAAABQAAAAYkAAQBBAwABA8EAyEAAdgAAzoBAAArAAAHCAMlAAQAAggEIgAAA6MrAAgFAAUAAAQFAgMAAAQDDwQqAgYEAAAEDwwHDgAEDwcGIQAB4wAGOgEAACoCBQoqAAcPIAGRHAAHDwgAAAcKCAckAAQBBgwABA8GBSEAAewABToBAAAAAAQNAgUAAAQFDwYqAQYILQAAAAAIAAAABwAABA8MCA4ABA8IByEAAfQABzoBAAAqAAgPIAGCHAAHDwgAAAcKCAcqAAAIJAAEAgYAAAQABgAkAQQBCAAABAgCBioABgUqAgQFJAAEAQUMAAQPBQMhAAIDAAM6AQAAAAAECAIDAAAEAw8FKgEFBi0AAAAABgAAAAcAAAQPDAYOAAQPBgchAAILAAc6AQAAKgAGDyABfBwABw8IAAAHCggHJAAEAQYMAAQPBgUhAAITAAU6AQAAAAAECQIFAAAEBQ8GKgEGCC0AAAAACAAAAAcAAAQPDAgOAAQPCAchAAIbAAc6AQAAKgAIDyABdioBCwkcAAcPCAAABwoIBywAAAAABwAAAAgkAAQBBgwABA8GBSEAAiUABToBAAArAAAJCAMlAAQAAggEIgAAA6MrAAgFAAcAAAQHAgUAAAQFDwYqAggGAAAEDwwJDgAEDwkIIQACMAAIOgEAACoCBwsqAAkPIAFiHAAHFhUAAAcPFRQqAAAVJAAEAhMAAAQAEwAkAQQBFQAABBUCEyoAExIqAgMSJAAEARIMAAQWEhEhAAJAABE6AQAAAAAEFQIRAAAEERYSKgESEy0AAAAAEwAAABQAAAQWDBMOAAQWExQhAAJIABQ6AQAAKgATFiABTyoBERUMAAQWFQshAAJOAAsgAm0qARcVKgEXCyQABAQGDAAEFgYFIQACVAAFOgEAAAAABAsCBQAABAUWBioBBgoqAQ0LJAAEAwYMAAQWBhghAAJcABg6AQAAAAAECwIYAAAEGBYGKgEGBQAABwoFCyQABAQFDAAEFgUYIQACZAAYOgEAACsAABUIAyUABAAFCAQiAAADoysACAUACgAABAoCGAAABBgWBSoCCwUqAgoXIAJtAAAEFgwVDgAEFhULIQACcQALOgEAACoAFRYgAS4qAAAZJAAEAxYAAAQAFgAkAQQBGQAABBkCFioAFgsqAgULAAAECwILKgIaCyQABAILDAAEGAsKIQACgAAKOgEAAAAABBkCCgAABAoYCyoBCxYqAQgZCgABGQ8KIQAChwAKOgEAACoBERkKAAQZFAohAAKjAAogAosqAQ0ZKgERCyoBEQokAAQDGwwABAobHCEAApIAHDoBAAArAAAZCAMlAAQABAgEIgAAA6MrAAgFAAYAAAQGAhwAAAQcChsqAhYbKgEGFgAABBYCFioCFgYAAAQLDBYOAAQLFgohAAKgAAo6AQAAKgIGDSoCFhEgAswqAA4ZIAKlDAAEGRQLIQAC0gALIAKoKgENGSoBFwsqAAAKJAAEBQYAAAQABgAkAQQBCgAABAsCBiQABAQbAAAECgIcPgMAAAAGAAAAHCoBGQsCAAQLAgsqAgsZKgEZCwAABAsCCyoCCxkqAQoLAAAECwILKgILCisAABkIAyUABAAECAQiAAADoysACAUACwAABAsCHAAABBwOGyoCFhsqAQsWAAAEFgIWKgIWCyoBChYAAAQWAhYqAhYKKgILDSoCChcqAgwRIALMAAAEGAwZDgAEGBkWIQAC0AAWOgEAACoAGRggASUqARELDAAEGQsKIQAC1gAKIAL1KgEXCyoBFwokAAQEGwwABBkbHCEAAtwAHDoBAAAAAAQKAhwAAAQcGRsqARsGKgENCiQABAMbDAAEGRsdIQAC5AAdOgEAAAAABAoCHQAABB0ZGyoBGxwAAAcGHAokAAQEBgwABBkGHSEAAuwAHToBAAArAAALCAMlAAQABQgEIgAAA6MrAAgFABwAAAQcAh0AAAQdGQYqAgoGKgIcFyAC9QAABBkMCw4ABBkLCiEAAvkACjoBAAAqAAsZIAKlKgEYDQwABBENCiEAAv8ACiADHioBFw0qARcKJAAEBAYMAAQRBhshAAMFABs6AQAAAAAECgIbAAAEGxEGKgEGCCoBCwokAAQDBgwABBEGHCEAAw0AHDoBAAAAAAQKAhwAAAQcEQYqAQYbAAAHCBsKJAAEBAgMAAQRCBwhAAMVABw6AQAAKwAADQgDJQAEAAUIBCIAAAOjKwAIBQAbAAAEGwIcAAAEHBEIKgIKCCoCGxcgAx4AAAQRDA0OAAQRDQohAAMiAAo6AQAAKgANESAA5SQABAIIDAAEEQgGIQADKAAGOgEAAAAABA0CBgAABAYRCCoBCAoqARoGCgABBg8IIQADLwAIOgEAACoBGAYKAAQGFAghAANLAAggAzMqAQsIKgEYBioBGBskAAQDHQwABBsdHiEAAzoAHjoBAAArAAAICAMlAAQABAgEIgAAA6MrAAgFABwAAAQcAh4AAAQeGx0qAgodKgEcGwAABBsCGyoCGxwAAAQGDBsOAAQGGwghAANIAAg6AQAAKgIcCyoCGxggA3QqAA4IIANNDAAECBQGIQADegAGIANQKgELCCoBFwYqAAAbJAAEBRwAAAQAHAAkAQQBGwAABAYCHCQABAQdAAAEGwIePgMAAAAcAAAAHioBCAYCAAQGAgYqAgYIKgEIBgAABAYCBioCBggqARsGAAAEBgIGKgIGGysAAAgIAyUABAAECAQiAAADoysACAUABgAABAYCHgAABB4OHSoCCh0qAQYKAAAECgIKKgIKBioBGwoAAAQKAgoqAgobKgIGCyoCGxcqAgwYIAN0AAAEEQwKDgAEEQoIIQADeAAIOgEAACoAChEgANwqARgGDAAECAYbIQADfgAbIAOdKgEXBioBFxskAAQEHQwABAgdHiEAA4QAHjoBAAAAAAQbAh4AAAQeCB0qAR0cKgELGyQABAMdDAAECB0fIQADjAAfOgEAAAAABBsCHwAABB8IHSoBHR4AAAccHhskAAQEHgwABAgeHyEAA5QAHzoBAAArAAAGCAMlAAQABQgEIgAAA6MrAAgFABwAAAQcAh8AAAQfCB4qAhseKgIcFyADnQAABAgMBg4ABAgGGyEAA6EAGzoBAAAqAAYIIANNKwEIAwgGCwAECAYAAggHIQADpwgHIAOpKwAIAwgFIAO3KwAAAAgFAQAEAAAIBAAAJQAEAAAICQ0ABAgJCAQIChcACAoICiEAA7UICgEABAgDCAkICysBCAsICAEABAgFCAkICysCCAgICwEABAgJAAIICSADrCUBBAABCAUgA7cjKwAYyhjK","debug_symbols":"7Z3bbhw3EobfRde+4KF4yqssFoGTOIEAww5iZ4FFkHdPa+Q+yD0kPU6NWMWqm4W8oWb+/9NM119sNvnXwy/vfvrztx8fP/z68dPDD//56+H9x5/ffn78+GH5119/v3n46Y/H9+8ff/vx+H8/mKf/KZfhn35/++HpX58+v/3j88MPNjl48/Duwy9PP3pYXuDXx/fvHn5I5u8358HB2nVw8HYbbKO7MhqcLV9Gg3N5H23sldExW/9ldMyuvBj93zcP1iCoD9vgkHNHvQWX1tHw9HrraB+vjM4ufxmcY3kx9km7ZazdMdbuGWsHxtoDY+3x1bXbsGu3Jz2JmJ5MTE+hpccZYnosMT2OmJ7XrxG5bKNN71rl8hq4vNm1h3yRDnylB77SI23psH7aXUzbWG/CRXtirD0z1l74aveGtva0Jj9X/Em7ZazdMdb+6kX1ODHhTkXeAy098Op/25B3PaV0G6T1g5ABXvxtr4y16+cgh9PnALwQnyDEZxDiMwrxmYT4zEJ8Fhk+gxHi0wrxKSQPBSF5KIAQn0LyUBCSh4KQPBSE5KEgJA9FIXkoCslDUUgeivPUlZDW1UshwcnnPNehsE0Sh5K/9pnmuQ5FWD+3MZ4+t2me61Db5zzXobbPefqytk8Q4nOevqztc5762fY5T1/W9jlPX9b2STwPVTPrlVd2yayv7PJhtIUnp5l4IkJ0SjwTITolnopuceq9W1/ZQzg5JZ6LEJ2CGKfEs9EtTsHsy/6dOTklno4QnRLPR4hOiSekm5yGuDk9PIiyOp0oI7WdlokyUsfpRBkpbE9R2QD25HSijNRxOlFGaju1Zp5pz+Z0vTXzzHt2jM4z8dkxCvPMrGxLy6OLZ6MTTX22jU4099k2OtHkZ9voRLOfZjeazkbnuR3cNmonuh/cNjrRDeG20YnuCLeNTnRLuG0UpBidJxk1F+FYO9GqqrbReZJRx+g8yahjVMhCOevmSUYdoxPNGbWNTjRn1DY60ZxR2yhIMSolGTkpychJSUZOSjJyUpKRl5KMANloCR2jKa53SFLaZ1+fdzWzYEmpQQhTMWx/1njY1qqyV3Eo631SiHbXc32v4uK2G6XFxfNexRj73oyUD7zlB97yI2/5ibf8/NryYwib/OPexaugQkwQxuYruILsqwtycRdkO5+4Y6Hbi6Lz5Vm84yweo86lXXxxPfF5m+KHfJjjvy7+JiG9CwPGniZsvAZBXqMgr0mQ1yzIa5nHq3dh7Zq9P6wSsk+PEZ5f2tht3Z81zh6WuDr/fJ6DUTZVNlbZVNk4ZVNlM1HuQ2cDyqbKZqJcic5mohyKzmai3IrOZqKci85Gc3GVTdJcXGejubjORnNxnY3m4jobUDZVNpqL62w0F9fZaC6us9FcXGejubjKJmsurrPRXFxno7m4zkZzcZ0NyGXjbNnZePeCzZXx2W/b0+Rw3J7GPJMUnKKRSQrO3MgkBSf0G0lC2bdOK4fHt5/3nsqC4zwuSMHZHxVkEdwo3Agy7sMjxBNIwV0FLkjBLQguSMH9Ci5IUJA4ILW3QQKprQ0SSO1skEBqZ4MEUjsbFJDOaGeDBFI7GySQ2tkggdTOBgkkKEgckNrZIIHUzgYJpHY2SCC1s/lmkHG7jRgPO1atILWzwQFptbNBAqmdDRJI7WyQQGpngwQSFCQOSO1skEBqZ4MEUjsbHJBOco48LmjO4QXICxvBhdj7nY2H1PuQNcdfWAquxTeyTNur25TS6QsruBbjghRci3FBCp7TuRFkTm4dnos9gjwPzn7dKzb78jVzL7jZviPz5QW3sGSCPVHXQHAX6tauH3W7zL6fqINSH0Bdc8YI6hpKRlAXPJswkLrgm6oDqWtaH0AdBE+zDaQu+N4uGvULSG03kUBqB/mNIJ0xayvullseJ5CgIHFAap+HBBKjdXN+B9k7d3Axu452yXYPh+zt3+NQzjsbaiBzN1CYG0A5UW2oAcvdgONuwHM3ANwNBO4GuFfiQL0So24t5gL1uo1sl3qVx7UbqWcCzL20XKQeIHDdUk8buG6pRxPUZ95Qjv/i45Z66MF1Sz0h4bqdLE513E6WpjpuJwtTbbdpsizVcTtZluq4nSxLddyKylIoR0bxcSsqSyVRWSqJylJJVJZKorJUFpWl8mxZqvlUa54tS7Xdzpal2m5BlNvZslTb7WxZqu12tizVdjtblmq7nS1LNd2W2bJU2y35etvZ2KJQv8xi7z5RqF9pUR/IL9SvtLhuqV9pMd16Q72zGbQjgjfUg/KwbQu8mexyj/eEmDeTFQZMNJNVEUw0k5UcRDSWeicwEA31KdiBaASnmh4a6s3mQDQgBc3FrZiAe3E7V2ZtPzvq7VwxtOd2rmTZc4sQFtP2Dsv0gH+h/+ktMDbx7b2Fvf9bIISAvBeMDKb3hw5pe+mQDzMKNjwLQii9eZ9Jzjl2BIHP6zURfDnIv/pofCxxFRJLKi9GX+QjlMcMaZff++KAW5+egGjPNAPGnxd2OeX8CYr3f4t0/7e4fnk8XJT8YX3H9bfofbJL5S3c/hb5+BZPv+TN9/yS/Z5fuv5R8Wl7OscfrvnXCbi4vYM7fnKfboecv0pLBV6/St6X3hfPbh/05cd0+uJVNjYDuykC8D35+5Yay+2a/S1SvDI6lLjOGYfSvW6E5NfXXn50Z/mFtfzKVlts5Fve8h1v+Z63fOAtP/CWH3nLT7zl8666wLvqBt5VN1C/cIa8yQ/nVi9Q/+pu7UhI2Zzlv/5XN2ytszGhI9+WsAkpLzrbL/ILa/nR8JaPEJi9h70dLS/kX97C3f8t/N3fIiFc48I+OPjc+TvjdtUZ4WO6XIi2WWPjX1d+JRzGTRGU7rds3JxGZT1zgG2+NcTOlExYHK5V4LIjZ1NQgm2b0ATuXLErS46PghJ8PbFU7Pf80vVvf7Bm+yXoTfkNjDaV1cps5ANv+YG3/MhbfuIsf7kCEpff7ErAUP/qNrsSMK//1UXMxWAib/mJt/z87+W38zxUVqFivkVlNSfqWyDEk3FdCViEP8K4rgQQ1lyELacHtw+trRDYnsNb3jr3xGe73vKO2Z3rC8L6jLDdVA+ht4oIdpZgD09ZXBefXVhH5xfN2io+EP/gbNfOaLM9y4/E5YfYlJ+Iy8/bJ9+WczB0mbd86hfNtnxveMu3vOU73vI9b/nAWz71qtuRT73qduTzrrqed9X1vKsu8K66QL3qgtvl927OLFMl62uXcKW5Aeo1um72Ip96je7Ip16jO/Kp1+iO/Ex8Qqvd2EMhLr/d2AdDXH67SgTLW77jLZ/6XHRHPvCWH3jLj7zlJ+LyMfNpoF6j2xEjUK/RbfmReo3uyKdeozvyEarEwEUlkfiCqmy326HZnfNppL6gajsB77p86guqtiK3yHe9KgHbtnkF0hWzmbjZ9vqlWFjLT4a3fOpr9zryqS967sinvui5I596je7Ip77ouSOfeo3uyKdeozvyeVfdxLvqZt5VN/Ouupl31c28qy75R/Tad24qx8nQkd++c1M5H4aO/Pb8aeUBSS7yK49TspFvect3vOV73vKBt/xAXD7mnZtCvUa3J98L9RrdkU+9RnfkU6/RTfnBIGxDMu6RoWA8cfnNfBoMEJffrBLBBN7yI2/5ibf8zFt+YS3fUt/5qCPf8pZPvep25FOvuh35vKuu5V11Le+qa3lXXUu96iI29sFSr9Ht3sxRr9Ed+dRrdEc+9RrdkY9RJYY9MhRcJC6/3di7RFx+u0q4zFt+YS3fG97yLW/5jrd8z1s+EJePmU899Rrdjhieeo3uyKdeozvyqdfotnzyZ1I1HxkK1M+kaj8yFMifSdV8ZCiQP5MK8ZGhQP4Eq+YKyED+BKuOfNbH4ATyJ1h15FM/waotn/wJVh351Gt0Rz71cyM78qnX6I586jW6I5931Q28qy7vw+dC4F11A++qG3lX3cqxbXROKm/fuansBUJHfvvOTaR+Tnx7/rSyFwgb+Ym3/MxbfmEtv7K7Bxv5lrd8x1s+9arbkU+96nbk8666iXfVTbyrbuJddRP1qot5yztTr9Htu5aZeo3uyKdeozvyqdfojvzrVeKWs+VsdOu1xMbSO13OhbKOXuYzcme0NX47uW75GfaT/bzz18bntKHMZe+knzycBme/HoedDxyXoRcwSS4Ya8y2k42xJzSVPTQUzYLGKpoaGicZzbacwppgT2i8oqmhAUVTQxMUTQ2N4FTTQyM617TRZEVTQ1MUzXU00YhOwyFsrx3zCY3oNNxGIzoNt9GITsNtNKBoamhEp+E2GtFpuI1G03AVjabhauTTNFxDY0Wn4TYa0Wm4jUbnhqtodG64igYUTQ2Nzg1X0ejccBWNpuEqGk3DVTSahmtonEa+KhqNfFU0GvmqaEDR1NCQL9778WjLz+UFmosB8iW2Z4B8IewY8OQnb3oGyNfbngHyVbFngHzt6hkgX2F6Bsi3/j0D5Bv0ngHuldhzr8SeeyUG7pUYuFdi4F6JgXoldtt+iosB89LAtVZp737ysfux5tku9bp9o13n1u1brDv2kc/NHlAv8rhuqScCXLfU4wOuW+pZ41a3cd+kKcPXbgP1snijW9iHQzn9bQP1GorrdrKC23E7Wb1dbmNtWiCe3E5WbztuJ6u3HbeT1duO28nqbcct9YkAVLeR+qwBrtvJslTH7WRZquN2sizVcQui3IrKUlFUloqislScLUvFbYo15tMDQXG2LNV0m2bLUm23s2WpttvZslTb7WxZqu12sgoEZnML7sUs3Hlwa0O7mCe7oN0CprN0Ms82K4+IZrYp/FvQWLs9O77EvxOa2eb7EdGAoqmhmaz7xUQzWauMiUZwqumhmawJx0QzWceOiIb8HsYD0UhOwx00moaraMSk4YtbEOVWTGa9uBUTQy9uxSTLi1sxYfHidrb8B5sWCF/fjUvkN+LFdTtbSmu7nS14td3OlqXabkGU29myVNvtbFmq7Xa2LNV2O1uWarsVlaXIb+OK61ZUliK/2Srmc0qJ/P6puG5BlFvO6eJigHNguBjgnAEuBjiX9ScD5PdRHLTeLZHfRfGui7paR3EmJ3mhRQeN5IUWHTSSF1o0V0km8js/jkNDfk/JgWh02XEVjeSFFh00onNNGw0omhoaycuOO2hEp+HW8XiJ/E6mA9GITsNtNKLTcBMN+X1dB6IRnYbbaESn4TYaTcNVNKBoKpFvtu1zMdGITsNtNKLTcBuNzg1X0ejccA1N0LnhKhqdG66i0bnhKhpNw1U0oGhqaDQNV9Fo5Kui0chXRaORr4Zmti2qMdFgFO9kdzSuYxayWUdDPoi3xl577VuE+AX7l8Heu3gQ4q+Dud+xuc1Fgig7Lyvz84s3V5Kh7BKs1G+lnpX6AOpFqd+FerOWouzerNRvpW6V+gDqTqkPoK5pfQR1UOoDqAelPoB6VOoDqGtveh/qzWVcSXvTEdS1Nx1APWtvOoK69qYjqGtvOoK69qYjqINSv3dev0Jde9MBXVLW3nQEde1NR1DX3nQEde1NB1Av2puOoK696Qjq2puOoK696QjqoNQHUNfedAR17U1HUNcuaQR17ZJen3o22iWNoK5d0gjqIJi63Vf2e3vaez0byfmux0ZyCuuxkTyP32MjOUf22EhOex02VnIm67ERnJxufJ4772EoH8OQNc8kBc8Z30jSufXVrYOvj27KVvA0MC5IUJA4IAWHeVyQgpP/rSDjZtNlOIEUHPcwzwnMTnA2xAWpQRIJpObIbwUZ7VZsIsQTSM2RSCBBQeKA1ByJBFJzJBJIwdPNuCAFz03jgtTOBgek184GCaR2NkggtbNBAqmdDRJIUJA4ILWzQQKpnc03g4zb/diY8wmkdjZIILWzQQKpnQ0OSNDOBgmkdjZIIDX+fCvIW07FaJ3PkEHr0j2Yd9b8gxaxAdSDVry7ULd227VracZO1LU8jqCus4QjqOuU4gjqoNQHUNe0PoK6zmyOoK7ToCOoa286grr2pgOoR+1NR1DX3vTfU7+A1HYTCaR2kEggQUHigNQ+Dwmktm5IILUb+2aQsG1rBeG0TErygdW4ILVnwgEp+VhpXJDa2SCB1M4GCaR2NkggQUHigNTOBgmkdjZIILWzQQKpnQ0SSO1scEBKPpQYdWcfyecM44LUzgYJJCjIayAvbDRj19lobK6z0SRcZSP5DMlRz0lJPkHyrk/smH1ndXumrpV1BHWt2SOoaxq4D/XmM4FFc8YI6jo9N4K6zuW9PvUi+SzDgdQ1r4+grlOKI6jryooR1EGp34V62J7YMTGfqGtvOoK69qYjqGtvOoK69qYjqGtvOoC65DNdB1LX3vTuef0Kde1NB3RJegztEOqg1AdQ1950BHXtTUdQ1950BHXtTUdQ1950AHU9U3oIde1NR1DX3nQEde1NR1DXLmkEde2SRlDXLmkEde2SXpv638u//vf2j8e3P71/92n5naf/+OeHnz8/fvzw5Z+f///7839ZBv8D","brillig_names":["constructor"],"assert_messages":{"445":"attempt to add with overflow","887":"attempt to add with overflow","107":"attempt to add with overflow","363":"SharedImmutable already initialized","491":"Array index out of bounds","482":"attempt to add with overflow","671":"attempt to add with overflow","747":"Array index out of bounds","595":"Array index out of bounds","915":"Array index out of bounds","461":"attempt to add with overflow","522":"attempt to add with overflow","327":"Initializer address is not the contract deployer","583":"attempt to add with overflow","129":"attempt to add with overflow","321":"Initialization hash does not match","772":"Array index out of bounds","760":"attempt to add with overflow","437":"Array index out of bounds","839":"attempt to add with overflow","111":"Array index out of bounds","559":"attempt to add with overflow","611":"Array index out of bounds","739":"Array index out of bounds","928":"attempt to add with overflow","410":"SharedImmutable already initialized","471":"Array index out of bounds","538":"attempt to add with overflow","657":"Array index out of bounds","788":"Array index out of bounds","331":"invalid admin","907":"Array index out of bounds","453":"Array index out of bounds","514":"Array index out of bounds","575":"Array index out of bounds","639":"Array index out of bounds","825":"Array index out of bounds","118":"Array index out of bounds","499":"attempt to add with overflow","624":"attempt to add with overflow","807":"Array index out of bounds","548":"Array index out of bounds","801":"attempt to add with overflow","603":"Array index out of bounds","731":"Array index out of bounds","530":"Array index out of bounds","719":"attempt to add with overflow","780":"Array index out of bounds","73":"attempt to add with overflow","899":"Array index out of bounds"}},{"name":"get_sign","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"signer","type":{"kind":"string","length":130},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_sign"]},{"name":"end_sign","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"JAAEAQIlAAQIQwAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAc5AAAACEMAAAAAHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQQKAAIGBAUhAAAOAAU6AQAAJAAHAAQqAAAGJAAEAgUAAAQABQAkAQQBBgAABAYCBSoABQcqAgQHKgEGBQAABAUCBSoCBQYqAAAFAAAEAAIAKgIGBSQABwEEJAAEAAYkAAQBByoABgMgACEKAAQDBgghAABKAAggACQqAQUIAAAECAIJAAAECQYKKgEKBR4AAgAICgAHBQgJIQAALAAJOgEAACQABwQIKgAABSQABAIJAAAEAAkAJAEEAQUAAAQFAgkqAAkKKgIECioABgMgADYKAAQDBgkhAAA6AAkgADkjHAAHAwkAAAcICQokAAQBCwwABAMLDCEAAEAADDoBAAAAAAQFAgwAAAQMAwsqAQsJLQAAAAAJAAAACgAABAMHCg4ABAMKCSEAAEgACToBAAAqAAoDIAA2KgEFCBwABwMJAAAHBAkKLAAAAAAKAAAACSQABAELDAAEAwsMIQAAUgAMOgEAACsAAAgIAyUABAACCAQiAAAAYCsACAUACgAABAoCDAAABAwDCyoCCQsAAAQDBwgOAAQDCAkhAABdAAk6AQAAKgIKBSoACAMgACErAQgDCAYLAAQIBgACCAchAABkCAcgAGYrAAgDCAUgAHQrAAAACAUBAAQAAAgEAAAlAAQAAAgJDQAECAkIBAgKFwAICggKIQAAcggKAQAECAMICQgLKwEICwgIAQAECAUICQgLKwIICAgLAQAECAkAAggJIABpJQEEAAEIBSAAdCMrABjKGMo=","debug_symbols":"1ZrdbuIwEIXfJddceMZ/M7zKalVBC1UkBBXQlVaId1+nxU6qpI52u1QzN4jAsedLmHDsmVyap8369fmh3W8Pp2b549LsDo+rc3vYp6PLddGsj+1u1z4/DD9uTPcS3+Snl9W+OzqdV8dzs4SIbtFs9k/dW+vSBNt2t2mW0VwXIzHbeNOyj0UKASe0DoFvYodIvdrAhDoQ2Js6EPIH9c9FQ19GTxMVsRmIvwGev37dY56fee66A7osBmSeQSfwGYNgOPc7Opj/yJ6u+0f4LgDcOwDeO4C9dwA3FcDGaG6DbCSaS/5IOUIK0UcgP6H2HHLye2Yzk0E+WsjqaHGUQV41fVBNH1XTk2p61kyPRjU9qKZH1fRWNb1qr0XVXouqvRZVe62Vftd6KvR+tMGy0jMnukJPZkT//ZlT9nzBGD9DD4ZDP3evtuDf6Ek1PWumd5+s0jiHsARYp3eWMBc67GwmBw6FnuPoPnSz665UbhjydGPwH8bYvx/jp52dKFe0LIOd+aUxYKmsDNJi+pcOFvLUwdq5OkxIk2c14KgO40k4fYRCTzCiZ+H0PlTogxFOT6X4CDxy9gCq6VE1vVVNL/0fs07vVdMH1fRROL3Dnt7OqNOCrW96EY3OVbozf36uHb10Z67SR+nOXKeX7sx1eqe5YhCFV8oISrWGcLQijdLrHWXXOkkvvVJWvC3R45w7pA10dgcXx+cqvYdVrUxF6T2sKj1J72HV6aX3sOr00ntYdXrp1fA6vXRnrtNL72HV6VV3Iki6M9fpVXstqfZaVu21rNprWbXXsmKvvabDX6tju1rvNrenr7ev+8fBw9jn3y/v3yTxHw==","brillig_names":["end_sign"],"assert_messages":{"13":"Not initialized","63":"Array index out of bounds","71":"attempt to add with overflow","81":"Array index out of bounds","92":"attempt to add with overflow","43":"Only admin can end signing"}},{"name":"sign_doc","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"signer","type":{"kind":"string","length":130},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_keys_and_partial_address","get_key_validation_request","decompose_hint","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_invert"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9VYTXPaMBCVg41lUwe3gEnSQ3ttT3IwNNyY6ef/8KTX/IT89bBGOzw2xBkUaSZoxiNb0r59eitpbUdqV/T2iux9Yuuhel54zMbW5m2l9ohlQvKMzoTnxZnwHJwJz9gjz+gIT6pje0/7jvZcqnb78VknGlOgB9Cv+oCk10dbZxYInW08KZcJv96w75o2s9wD8F4Sbh4G21BAfuq99gp8UTD/2j6uI3sVtl+BfaH2Af8FbbxQfkMbn+R/oC1Vh76Ijw4Tr7uA8TIFaKjABxbcJLzecxUszl22GAn/ufDfxdQKrqEttg8jaEvEmqHHL9CvYU7c/13MDbkMBBfCTUJoYWM/DIFtTIMaxkc0TI5oODyi4WR7/RM4xDvVQXh3mUADxxh8Mc8LGKOBRwLP39S+PYOTPgZdGHdMc+d1pF+2i4VdCWOGYJcKuxR4d2O311d7P7J64hng701ltZZntj/sH4tM7feiZ973hP0hCHbTYReA7XP9EvZlGE1WhD0Og93l9jII9m2nyUfA9vjFUFMcP6nDQv4mQeJb1335k33mwClE/pwI/+wL8+dUcCqhDffVVGBNBRZpOYPxHtfcf+Q0O4ET2pWOdiNHu1N4knYVjPd49jbIqXKcy9jRLne0OyVWpN0cxntcdwfazR3n4qrdpaNd5mjnus5d5zcHvngG+/xLhJxii82+OM8kMObB1nQuXqnDQjyvgafHXHHblyuugRPfM7dccErewGmxWJt2tV6umrq9b9tFBNjMiZ/xf8eNGCNzDOn2OYxuBr9dbkAnfv9G7fibgLngt0sG9r459unIPkvBlXm8pj9pfQX3PJcC7DZe5rH7R4DvE+xrFkQ3s+zbE+wzV6He33bvTzPhfyL0J00qwamENoxlJbAqgfUe7PAfGc+V8sIT7yz2rOIYAAA=","debug_symbols":"tdnLaoNAFIDhd5m1C29zLr5KKUETDYJoUFMo4rvXtKEEsv434tEz/+5bzRYubXO/nvqxm5ZQfWxhmM712k/jMW17Epq5H4b+enr9HNLHo8x/95dbPT7GZa3nNVRFmYR2vBwvfpzu+qENlaZ78rao+XNR9X8x+v6ZhLKgwiUVjlRYqLBSYaPCDoVjSoUzKkzJi5S8SMmLlLxIyYuUvEjJi5Q8oeQJJU8oeULJE0qeUPKEkieUPKHkCSVPKXlKyVNKnlLylJKnlDyl5CklTyl5SskzSp5R8oySZ5Q8o+QZJc8oeUbJM0qeUfKckueUPKfkOSXPKXlOyXNKnlPynJLnlLwsTbFyhpVzrFxg5RIrR6wsWFmxsmFlzGDGGNyP6aue+7oZ2ueVQXcfzy83COv37e/PsfwD","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"3773":"attempt to add with overflow","110":"attempt to add with overflow","2347":"attempt to add with overflow","3371":"attempt to add with overflow","3237":"Array index out of bounds","1433":"Function get_signer_status can only be called statically","86":"attempt to add with overflow","3859":"attempt to add with overflow","3134":"Array index out of bounds","3189":"Array index out of bounds","2354":"Array index out of bounds","3567":"Array index out of bounds","3433":"attempt to add with overflow","3945":"Array index out of bounds","3299":"attempt to add with overflow","2976":"attempt to add with overflow","1117":"attempt to add with overflow","3811":"attempt to add with overflow","3732":"attempt to add with overflow","2385":"attempt to add with overflow","2574":"Array index out of bounds","3409":"Array index out of bounds","1605":"attempt to add with overflow","2629":"Array index out of bounds","2873":"Array index out of bounds","3251":"attempt to add with overflow","2416":"Array index out of bounds","2093":"Array index out of bounds","2605":"Array index out of bounds","3629":"Array index out of bounds","3952":"Array index out of bounds","3361":"attempt to add with overflow","2014":"Array index out of bounds","2959":"attempt to add with overflow","3471":"attempt to add with overflow","2880":"Array index out of bounds","2289":"attempt to subtract with overflow","3502":"Array index out of bounds","2667":"Array index out of bounds","3691":"attempt to add with overflow","3210":"attempt to add with overflow","2375":"attempt to add with overflow","193":"attempt to add with overflow","3454":"attempt to add with overflow","3643":"attempt to add with overflow","3375":"Array index out of bounds","3887":"Array index out of bounds","2595":"attempt to add with overflow","413":"Initializer address is not the contract deployer","1626":"Array index out of bounds","1492":"Storage slot 0 not allowed. Storage slots must start from 1.","3327":"Array index out of bounds","2492":"Array index out of bounds","3004":"Array index out of bounds","3382":"Array index out of bounds","3760":"Array index out of bounds","2846":"Array index out of bounds","3547":"Array index out of bounds","2389":"Array index out of bounds","2767":"Array index out of bounds","2444":"Array index out of bounds","2554":"attempt to add with overflow","2341":"attempt to add with overflow","159":"attempt to add with overflow","1884":"Array index out of bounds","2207":"Array index out of bounds","2396":"Array index out of bounds","2506":"attempt to add with overflow","3719":"Array index out of bounds","3963":"attempt to add with overflow","2616":"attempt to add with overflow","1647":"attempt to add with overflow","678":"Storage slot 0 not allowed. Storage slots must start from 1.","1757":"Array index out of bounds","1166":"Not initialized","197":"Array index out of bounds","1922":"Array index out of bounds","441":"SharedImmutable already initialized","1252":"Storage slot 0 not allowed. Storage slots must start from 1.","417":"invalid admin","2465":"attempt to add with overflow","2788":"attempt to add with overflow","204":"Array index out of bounds","905":"Not initialized","1795":"attempt to add with overflow","2819":"Array index out of bounds","2685":"Array index out of bounds","3197":"Array index out of bounds","3575":"Array index out of bounds","3520":"Array index out of bounds","3118":"Array index out of bounds","1826":"Array index out of bounds","991":"Storage slot 0 not allowed. Storage slots must start from 1.","3417":"attempt to add with overflow","2582":"Array index out of bounds","589":"Function add_sign can only be called internally","2637":"Array index out of bounds","3393":"attempt to add with overflow","2747":"attempt to add with overflow","2424":"attempt to add with overflow","486":"SharedImmutable already initialized","2022":"Array index out of bounds","2077":"Array index out of bounds","407":"Initialization hash does not match","2321":"Array index out of bounds","2699":"attempt to add with overflow","1864":"Array index out of bounds","2053":"Array index out of bounds","706":"Signer has already signed the document","3510":"attempt to add with overflow","2407":"attempt to add with overflow","3486":"Array index out of bounds","2328":"Array index out of bounds","3596":"attempt to add with overflow","2115":"Array index out of bounds","610":"Signing has ended","1634":"Array index out of bounds","2658":"attempt to add with overflow","3871":"Array index out of bounds","1366":"Only admin can end signing","1799":"Array index out of bounds","1665":"Array index out of bounds","2043":"attempt to add with overflow","3311":"Array index out of bounds","2988":"Array index out of bounds","3555":"attempt to add with overflow","3744":"Array index out of bounds","215":"attempt to add with overflow","1940":"Array index out of bounds","2452":"Array index out of bounds","1806":"Array index out of bounds","2775":"Array index out of bounds","1160":"Not initialized","2830":"attempt to add with overflow","3531":"attempt to add with overflow","3909":"attempt to add with overflow","1270":"Given signer already exists","2294":"Array index out of bounds","2861":"attempt to add with overflow","2215":"Array index out of bounds","1892":"Array index out of bounds","2916":"Array index out of bounds","2837":"attempt to subtract with overflow","2002":"attempt to add with overflow","3026":"Array index out of bounds","3703":"Array index out of bounds","1844":"Array index out of bounds","1009":"Given signer already exists","1765":"Array index out of bounds","1954":"attempt to add with overflow","2899":"attempt to add with overflow","2064":"attempt to add with overflow","2906":"Array index out of bounds","3583":"Array index out of bounds","2236":"attempt to add with overflow","1913":"attempt to add with overflow","2937":"attempt to add with overflow","3126":"Array index out of bounds","3181":"Array index out of bounds","1834":"attempt to add with overflow","3425":"Array index out of bounds","2267":"Array index out of bounds","2968":"Array index out of bounds","2133":"Array index out of bounds","2645":"Array index out of bounds","3157":"Array index out of bounds","3913":"Array index out of bounds","2566":"Array index out of bounds","3779":"Array index out of bounds","1786":"attempt to add with overflow","1329":"Storage slot 0 not allowed. Storage slots must start from 1.","2030":"Array index out of bounds","2085":"Array index out of bounds","1817":"attempt to add with overflow","2841":"attempt to subtract with overflow","1683":"Array index out of bounds","1872":"attempt to add with overflow","2195":"attempt to add with overflow","3219":"Array index out of bounds","1415":"attempt to add with overflow","3463":"Array index out of bounds","3920":"Array index out of bounds","2927":"attempt to add with overflow","1068":"Storage slot 0 not allowed. Storage slots must start from 1.","3494":"attempt to add with overflow","2147":"attempt to add with overflow","1745":"attempt to add with overflow","3147":"attempt to add with overflow","1855":"attempt to add with overflow","697":"Given signer doesn't exist in signer list","3879":"Array index out of bounds","3044":"Array index out of bounds","1697":"attempt to add with overflow","862":"attempt to add with overflow","3611":"Array index out of bounds","1429":"Not initialized","1618":"Array index out of bounds","2941":"Array index out of bounds","570":"attempt to add with overflow","1594":"Array index out of bounds","2106":"attempt to add with overflow","2996":"Array index out of bounds","3319":"Array index out of bounds","3752":"Array index out of bounds","3941":"attempt to add with overflow","3106":"attempt to add with overflow","3350":"Array index out of bounds","2893":"attempt to add with overflow","2759":"Array index out of bounds","2436":"Array index out of bounds","2948":"Array index out of bounds","766":"Storage slot 0 not allowed. Storage slots must start from 1.","3058":"attempt to add with overflow","2223":"Array index out of bounds","1900":"Array index out of bounds","2278":"attempt to add with overflow","3168":"attempt to add with overflow","584":"Not initialized","2309":"attempt to add with overflow","3711":"Array index out of bounds","2364":"Array index out of bounds","3900":"attempt to add with overflow","3443":"Array index out of bounds","1773":"Array index out of bounds","2285":"attempt to subtract with overflow","2474":"Array index out of bounds","3931":"attempt to add with overflow","3797":"Array index out of bounds","3340":"attempt to add with overflow","3017":"attempt to add with overflow","1347":"Not initialized"}},{"name":"add_signer_final","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"signer","type":{"kind":"string","length":130},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["add_signer_final"],"assert_messages":{"707":"attempt to add with overflow","637":"Array index out of bounds","500":"Array index out of bounds","881":"Array index out of bounds","424":"Array index out of bounds","613":"Array index out of bounds","482":"Array index out of bounds","869":"attempt to add with overflow","796":"attempt to add with overflow","473":"attempt to add with overflow","854":"Array index out of bounds","653":"Array index out of bounds","845":"attempt to subtract with overflow","775":"Array index out of bounds","452":"Array index out of bounds","321":"Storage slot 0 not allowed. Storage slots must start from 1.","574":"Array index out of bounds","827":"Array index out of bounds","888":"Array index out of bounds","693":"Array index out of bounds","562":"attempt to add with overflow","166":"Not initialized","675":"Array index out of bounds","346":"Given signer already exists","666":"attempt to add with overflow","849":"attempt to subtract with overflow","590":"Array index out of bounds","907":"attempt to add with overflow","645":"Array index out of bounds","514":"attempt to add with overflow","767":"Array index out of bounds","444":"Array index out of bounds","901":"attempt to add with overflow","755":"attempt to add with overflow","432":"attempt to add with overflow","624":"attempt to add with overflow","603":"attempt to add with overflow","405":"Storage slot 0 not allowed. Storage slots must start from 1.","783":"Array index out of bounds","460":"Array index out of bounds","838":"attempt to add with overflow","582":"Array index out of bounds"}},{"name":"get_signer_status","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"signer","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_signer_status"],"assert_messages":{"308":"Array index out of bounds","20":"Function get_signer_status can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}},{"name":"add_sign","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"signer","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["add_sign"],"assert_messages":{"439":"attempt to add with overflow","180":"Signer has already signed the document","52":"Signing has ended","619":"Array index out of bounds","296":"Array index out of bounds","418":"Array index out of bounds","543":"attempt to add with overflow","473":"Array index out of bounds","150":"Storage slot 0 not allowed. Storage slots must start from 1.","19":"Function add_sign can only be called internally","336":"Array index out of bounds","653":"attempt to add with overflow","260":"Array index out of bounds","449":"Array index out of bounds","318":"Array index out of bounds","632":"attempt to add with overflow","309":"attempt to add with overflow","169":"Given signer doesn't exist in signer list","489":"Array index out of bounds","611":"Array index out of bounds","288":"Array index out of bounds","410":"Array index out of bounds","529":"Array index out of bounds","14":"Not initialized","398":"attempt to add with overflow","642":"Array index out of bounds","511":"Array index out of bounds","502":"attempt to add with overflow","240":"Storage slot 0 not allowed. Storage slots must start from 1.","426":"Array index out of bounds","481":"Array index out of bounds","350":"attempt to add with overflow","603":"Array index out of bounds","280":"Array index out of bounds","591":"attempt to add with overflow","268":"attempt to add with overflow","460":"attempt to add with overflow"}}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"DocumentSigning"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"documentHash","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"signers","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"signingEnded","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"active_at_block","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"signer","type":{"kind":"string","length":130}}],"kind":"struct","path":"DocumentSigning::add_signer_parameters"}}],"kind":"struct","path":"DocumentSigning::add_signer_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"DocumentSigning::end_sign_parameters"}}],"kind":"struct","path":"DocumentSigning::end_sign_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"signer","type":{"kind":"string","length":130}}],"kind":"struct","path":"DocumentSigning::add_signer_final_parameters"}}],"kind":"struct","path":"DocumentSigning::add_signer_final_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"signer","type":{"kind":"string","length":130}}],"kind":"struct","path":"DocumentSigning::sign_doc_parameters"}}],"kind":"struct","path":"DocumentSigning::sign_doc_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"documentHash","type":{"kind":"field"}}],"kind":"struct","path":"DocumentSigning::constructor_parameters"}}],"kind":"struct","path":"DocumentSigning::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"signer","type":{"kind":"field"}}],"kind":"struct","path":"DocumentSigning::get_signer_status_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"DocumentSigning::get_signer_status_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"signer","type":{"kind":"field"}}],"kind":"struct","path":"DocumentSigning::add_sign_parameters"}}],"kind":"struct","path":"DocumentSigning::add_sign_abi"}]}},"file_map":{"100":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"101":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"102":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"122":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"123":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"128":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"129":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"130":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"131":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(address: Field, storage_slot: Field, block_number: Field, length: Field) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field\n    )\n}\n\nunconstrained pub fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"},"136":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"162":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"163":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"168":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"169":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"176":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"177":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"185":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"230":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"239":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"285":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"305":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"308":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"310":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"311":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"314":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"315":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"323":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"324":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"338":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/compressed-string/src/compressed_string.nr","source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\npub struct CompressedString<let N: u32, let M: u32> {\n  value: [Field; N]\n}\n\nimpl<let N: u32, let M: u32> CompressedString<N, M> {\n    pub fn from_string(input_string: str<M>) -> Self {\n        let mut fields = [0; N];\n        let byts = input_string.as_bytes();\n\n        let mut r_index = 0 as u32;\n\n        for i in 0..N {\n            let mut temp = [0 as u8; 31];\n            for j in 0..31 {\n                if r_index < M {\n                    temp[j] = byts[r_index];\n                    r_index += 1;\n                }\n            }\n\n            fields[i] = field_from_bytes(temp, true);\n        }\n\n        Self { value: fields }\n    }\n\n    pub fn to_bytes(self) -> [u8; M] {\n        let mut result = [0; M];\n        let mut w_index = 0 as u32;\n        for i in 0..N {\n            let bytes: [u8; 31] = self.value[i].to_be_bytes();\n            for j in 0..31 {\n                if w_index < M {\n                    result[w_index] = bytes[j];\n                    w_index += 1;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let M: u32> Eq for CompressedString<N, M> {\n    fn eq(self, other: CompressedString<N, M>) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Serialize<N> for CompressedString<N, M> {\n    fn serialize(self) -> [Field; N] {\n        self.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Deserialize<N> for CompressedString<N, M> {\n    fn deserialize(input: [Field; N]) -> Self {\n        Self { value: input }\n    }\n}\n\n#[test]\nunconstrained fn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1,11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_serde() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n\n    assert_eq(name, CompressedString::deserialize(name.serialize()));\n}\n\n#[test(should_fail)]\nunconstrained fn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"66":{"path":"std/string.nr","source":"use crate::collections::vec::Vec;\nuse crate::convert::From;\n\nimpl<let N: u32> str<N> {\n    /// Converts the given string into a byte array\n    #[builtin(str_as_bytes)]\n    pub fn as_bytes(self) -> [u8; N] {}\n\n    /// return a byte vector of the str content\n    pub fn as_bytes_vec(self: Self) -> Vec<u8> {\n        Vec::from_slice(self.as_bytes().as_slice())\n    }\n}\n\nimpl<let N: u32> From<[u8; N]> for str<N> {\n    fn from(bytes: [u8; N]) -> Self {\n        bytes.as_str_unchecked()\n    }\n}\n"},"70":{"path":"/Users/jan.thanei/Desktop/frontend/contracts/signing/src/main.nr","source":"use dep::aztec::macros::aztec;\n\n#[aztec]\ncontract DocumentSigning {\n     use dep::compressed_string::CompressedString;\n     use dep::aztec::prelude::{\n        AztecAddress, Map, PublicMutable, SharedImmutable\n    };\n    use dep::aztec::{\n        keys::getters::get_public_keys,\n        macros::{storage::storage, functions::{public, initializer, private, internal}}\n    };\n    use dep::aztec::oracle::debug_log::{ debug_log };\n\n    #[storage]\n    struct Storage<Context> {\n        admin: PublicMutable<AztecAddress, Context>,\n        documentHash: SharedImmutable<Field, Context>, //currently MD5 hash\n        //list with signers (in bytestream) and their respective hasSigned t/f\n        //problem: bool is not nullable, so we have to use Field with 0(doesnt exist),1(not signed),2(signed)\n        signers: Map<Field, PublicMutable<Field, Context>, Context>,\n        //signers_list: PublicMutable<Vec<Field>, Context>,\n        signingEnded: PublicMutable<bool, Context>,\n        active_at_block: SharedImmutable<u32, Context>, // when people can start signing\n    }\n\n    #[public] // annotation to mark function as private and expose private context\n    #[initializer] // annotation to mark function as a constructor\n    fn constructor(admin: AztecAddress, documentHash: Field) { // called when contract is deployed\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.documentHash.initialize(documentHash);\n        storage.signingEnded.write(false);\n        storage.active_at_block.initialize(context.block_number() as u32);\n    }\n\n    #[private] // annotation to mark function as private and expose private context\n    fn sign_doc(signer: str<130>) {\n        //v056 changes\n        let msg_sender_npk_m_hash = get_public_keys(context.msg_sender()).npk_m.hash();\n        let secret = context.request_nsk_app(msg_sender_npk_m_hash); // get secret key of caller of function\n        let nullifier = std::hash::pedersen_hash([context.msg_sender().to_field(), secret]); // derive nullifier from sender and secret\n\n        let signer_s: CompressedString<5,130> = CompressedString::from_string(signer);\n        context.push_nullifier(nullifier);\n        DocumentSigning::at(context.this_address()).add_sign(signer_s.serialize()[0]).enqueue(&mut context);\n    }\n    \n    #[public]\n    #[internal]\n    fn add_sign(signer: Field) {\n        assert(storage.signingEnded.read() == false, \"Signing has ended\");\n        \n        let current_status = storage.signers.at(signer).read();\n        assert(current_status != 0, \"Given signer doesn't exist in signer list\");\n        \n        if current_status == 1 {\n            storage.signers.at(signer).write(2);\n        } else if current_status == 2 {\n            assert(false, \"Signer has already signed the document\");\n        }\n    }\n\n    #[public]\n    fn add_signer_final(signer: str<130>) {\n        let signer_s: CompressedString<5,130> = CompressedString::from_string(signer);\n        let signer_serialized = signer_s.serialize()[0];\n        assert(storage.signers.at(signer_serialized).read() == 0, \"Given signer already exists\");\n        storage.signers.at(signer_serialized).write(1);\n\n        //let mut current_list = storage.signers_list.read();\n        //current_list.push(signer_serialized);\n        //storage.signers_list.write(current_list);\n    }\n\n    #[public]\n    fn add_signer(signer: str<130>) {\n        // Call add_signer_final directly without using enqueue\n        add_signer_final(signer);\n    }\n\n    unconstrained fn get_sign(signer: str<130>) -> pub Field {\n        let signer_s: CompressedString<5,130> = CompressedString::from_string(signer);\n        storage.signers.at(signer_s.serialize()[0]).read()\n    }\n\n    #[public] \n    fn end_sign() {\n        assert(storage.admin.read().eq(context.msg_sender()), \"Only admin can end signing\"); // assert that caller is admin\n        storage.signingEnded.write(true);\n    }\n\n    #[public]\n    #[view]\n    fn get_signer_status(signer: Field) -> Field {\n        storage.signers.at(signer).read()\n    }\n\n    //#[public]\n    //#[view]\n    //fn get_all_signers() -> Vec<Field> {\n    //    storage.signers_list.read()\n    //}\n}\n"},"99":{"path":"/Users/jan.thanei/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"}}}